<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2019-03-07T13:00:00Z</updated>
  <entry>
    <title>Has there ever been a better time to become a Java developer?</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/07/has-there-ever-been-a-better-time-to-become-a-java-developer" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ben Wilcock</name>
    </author>
    <id>tag:spring.io,2019-02-28:3589</id>
    <updated>2019-03-07T13:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;Surely there’s never been a better time to become a Java developer?&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;There are productivity tools available these days that would have been mind-blowing just five years ago. &lt;/p&gt;
&lt;p&gt;Take &lt;strong&gt;&lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;&lt;/strong&gt; for example. Many people reading this on the Spring website may be familiar with Spring Boot. But let’s take a moment to acknowledge its awesomeness. &lt;/p&gt;
&lt;p&gt;Years ago, if you were going to use the Spring Framework in your application, you had to be OK with a certain amount of configuration toil creeping into your day. But it wasn’t nice friendly configuration like, (ah, actually, sorry, I can’t think of an example of ‘friendly configuration’), it was nasty XML configuration with a side order of XSD, eww! &lt;/p&gt;
&lt;p&gt;Later, Spring did come along with more developer friendly configuration options (like Java-based configuration), but what Spring Boot did so successfully when it arrived on the scene in 2013, was relieve Spring Framework developers of much of this responsibility. This was thanks largely to its innovative ‘auto-configuration’ features. &lt;/p&gt;
&lt;p&gt;With Spring Boot’s ‘starters&amp;rsquo; your Spring application could simply configure itself. You no longer had to have an encyclopedic knowledge of the nuts and bolts of the platform to get started. You could still take control if you wanted to, but it wasn&amp;rsquo;t a requirement anymore. This flattened the Spring learning curve significantly and was terrifically liberating for Spring developers. All those hours spent reading docs, configuring stuff, troubleshooting errors, could be put to better use. Utterly brilliant!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And then there’s Spring Boot’s superior application packaging.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java’s “write once run anywhere” promise was a cruel joke for enterprise Java developers. You’d spend hours bundling up your application’s WAR file, messing about trying to get your deployment descriptor to work, only to discover later that it “only runs on your machine.” Grrrrr! &lt;/p&gt;
&lt;p&gt;Spring Boot’s executable JAR packaging fixed all that nonsense. By bundling the web container in with the binary, your application can run anywhere where there’s a compatible JVM. Total genius. No wonder Spring Boot’s become &lt;a href="https://snyk.io/blog/jvm-ecosystem-report-2018-platform-application/"&gt;the world’s most popular Java web framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But to get even this far you needed buildable Java project.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;And frankly, starting any new Java project was a chore. Maven and Gradle are both excellent build tools. We couldn’t live without them. But, IDE support for them was patchy, and who wants to spend their time editing POM’s and figuring out what’s the latest goings-on with the Gradle DSL? Not me. I’m too impatient. Life’s too short. &lt;/p&gt;
&lt;p&gt;So thank goodness for the &lt;strong&gt;&lt;a href="https://start.spring.io/"&gt;Spring Initializr&lt;/a&gt;&lt;/strong&gt;. With Spring Initializr, you can instantly download a ready-made Spring Boot project using the language and build tool of your choice. You don’t even need a browser! You can use the Spring Initializr straight from the command line with either &lt;code&gt;curl&lt;/code&gt; or the &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html#cli-init"&gt;Spring CLI&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seriously, if you’ve never tried it before, give it a try it now. It’s really rather straightforward:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All you need is a command line with &lt;code&gt;curl&lt;/code&gt; and Java. With this first simple command, you can ask the Spring Initializr for a Zip archive, which you can then unzip, and away you go. Just load the unzipped project into your favorite IDE, and you can start coding with it immediately.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;curl https://start.spring.io/starter.zip -d dependencies=web,actuator -d baseDir=demo -o demo.zip&#xD;
unzip demo.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’ve used assumed Linux here, but you can get &lt;code&gt;curl&lt;/code&gt; for Windows and Mac too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that it&amp;rsquo;s downloaded and unpacked, let&amp;rsquo;s run our app and try out Spring Boot’s brilliant JAR packaging at the same time. Simply type the following to start it up using your Java VM…&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd demo&#xD;
./mvnw package # Use mvnw.cmd on Windows&#xD;
java -jar target/demo-0.0.1-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you don&amp;rsquo;t have Java, head over to &lt;a href="https://adoptopenjdk.net/releases.html"&gt;https://adoptopenjdk.net/&lt;/a&gt; for an installer or installation instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s it. Spring Boot will start the application for you. Point your favorite browser at &lt;a href="http://localhost:8080/actuator/health"&gt;http://localhost:8080/actuator/health&lt;/a&gt;, and you will see a JSON message confirming that the application is alive and well and ready to go. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint json"&gt;{&amp;quot;status&amp;quot;:&amp;quot;UP&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;This is all excruciatingly simple compared to how things used to be.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In fact, it’s so simple, I bet a child could do it. If you&amp;rsquo;ve got one of those handy, why not ask them to sit down and give it a try right now? What better way is there to start someone&amp;rsquo;s coding journey than with Spring Boot and Spring Initializr? Why not let us know how you get on in the comments below or tweet your screenshots or photos to &lt;a href="https://twitter.com/springcentral"&gt;@springcentral&lt;/a&gt;?&lt;/p&gt;&lt;h3&gt;&lt;a href="#next-time" class="anchor" name="next-time"&gt;&lt;/a&gt;Next time&lt;/h3&gt;
&lt;p&gt;In my next installment, I’ll take this simple application and run it in a “production-like” environment, imitating what you might do on day one of your new startup gig :D &lt;/p&gt;&lt;h3&gt;&lt;a href="#would-you-like-a-bit-more" class="anchor" name="would-you-like-a-bit-more"&gt;&lt;/a&gt;Would you like a bit more?&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;If that task was too easy, or you have a bit more time, why not add the “thymeleaf” and “devtools” dependencies to your Spring Initializr &lt;code&gt;curl&lt;/code&gt; request from earlier and follow this tutorial to build your own simple web application: &lt;a href="https://spring.io/guides/gs/serving-web-content/"&gt;https://spring.io/guides/gs/serving-web-content/&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow and Skipper 2.0 GA Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/06/spring-cloud-data-flow-and-skipper-2-0-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2019-03-06:3596</id>
    <updated>2019-03-06T20:02:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; team is pleased to announce the release of &lt;code&gt;2.0&lt;/code&gt; of Data Flow.  Follow the &lt;em&gt;Getting Started&lt;/em&gt; guides for running on &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#getting-started-local"&gt;Local&lt;/a&gt;, &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#getting-started-cloudfoundry"&gt;Cloud Foundry&lt;/a&gt;, and &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#getting-started-kubernetes"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Hand in hand is the &lt;code&gt;2.0&lt;/code&gt; release of &lt;a href="https://cloud.spring.io/spring-cloud-skipper/"&gt;Spring Cloud Skipper&lt;/a&gt;. The &lt;a href="https://docs.spring.io/spring-cloud-skipper/docs/2.0.0.RELEASE/reference/htmlsingle/#getting-started"&gt;getting started section&lt;/a&gt; in the reference guide is the best place to start if you want to use Skipper separately from Data Flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="here-are-the-highlights-for-data-flow"&gt;&lt;a class="anchor" href="#here-are-the-highlights-for-data-flow"&gt;&lt;/a&gt;Here are the highlights for Data Flow&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stream deployment always delegates to Skipper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Single server that runs on all supported platforms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch tasks against multiple platforms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Standardize on OAuth2 and OpenID Connect for Security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revamped metrics and monitoring of deployed applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated analytics using micrometer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database migration support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update to Boot 2.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update internals to use JPA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task/Job Execution and Performance improvements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="stream-deployment-always-delegates-to-skipper"&gt;&lt;a class="anchor" href="#stream-deployment-always-delegates-to-skipper"&gt;&lt;/a&gt;Stream deployment always delegates to Skipper&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The 1.x series of Data Flow Server allowed for Streams to be deployed directly by the Data Flow Server or to delegate to Skipper.  This resulted in two modes of operation, 'classic' and 'skipper'.  Now there is just one option to deploy streams, via Skipper, which can deploy to all supported platforms and also provides rolling upgrade and downgrade functionality for long lived stream applications.  Architecturally, tasks are deployed by the Data Flow server as before, but can now deploy across different platforms.  See below for more on that functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/arch-stream-dsl.png" alt="The Spring Cloud Data Flow Stream Architecture" width="350"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="single-server-that-runs-on-all-supported-platforms"&gt;&lt;a class="anchor" href="#single-server-that-runs-on-all-supported-platforms"&gt;&lt;/a&gt;Single server that runs on all supported platforms&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We have consolidated the Local, Cloud Foundry, and Kubernetes servers into a single server, no need to pick different jar or docker images depending on what platform you want to run.  The getting started steps for each platform remains largely the same.  One big change is how Tasks are configured, see below, as we now support the capability for Tasks to be launched across different platforms.  Long-lived applications can be deployed across different platforms as in previous releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="launch-tasks-against-multiple-platforms"&gt;&lt;a class="anchor" href="#launch-tasks-against-multiple-platforms"&gt;&lt;/a&gt;Launch tasks against multiple platforms&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;When a task is launched you can specify the platform where it will execute.  Previously, this functionality was only available for Stream and Application deployment.
The Data Flow server lets you configure multiple Kubernetes and Cloud Foundry task platforms.
This is particularly useful when you want to orchestrate data pipelines against multiple platforms, but manage them all from a central location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For example, if you are running Data Flow on Cloud Foundry in &lt;code&gt;org1/space1&lt;/code&gt;, you can launch tasks in &lt;code&gt;org2/space2&lt;/code&gt; or into a namespace of a Kubernetes cluster.  Similarly, if you are running Data Flow on Kubernetes in &lt;code&gt;namespace&lt;/code&gt;, you can launch tasks in &lt;code&gt;namespace2&lt;/code&gt; or into &lt;code&gt;org1/space1&lt;/code&gt; on Cloud Foundry.
If running the Data Flow server locally, you can specify different local task platforms, say with different JVM properties, as an alternative to using task deployment properties.
The docs describe how to configure multiple task platforms for &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.REFERENCE/reference/htmlsingle/#configuration-local-tasks"&gt;Local&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.REFERENCE/reference/htmlsingle/#configuration-cloudfoundry-tasks"&gt;Cloud Foundry&lt;/a&gt;, and &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.REFERENCE/reference/htmlsingle/#configuration-kubernetes-tasks"&gt;Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/arch-task-dsl.png" alt="The Spring Cloud Data Flow Task Architecture" width="350"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="ui-improvements"&gt;&lt;a class="anchor" href="#ui-improvements"&gt;&lt;/a&gt;UI Improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The UI supports launching a Task against a collection of back-end platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The UI/UX is built with a consistent experience for both Stream and Task launches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building upon another important feature-set, it is now possible to automatically enable/disable Dashboard functionality based on granular roles defined in Data Flow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Grafana launch-icon is natively integrated in Dashboard’s Streams and Runtime pages.
With Data Flow configured against the available Micrometer backends, monitoring streaming-pipeline metrics such as message-rates, error-counts, and latency is just a click away!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new button to rollback to the previous version of a stream is now supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The analytics tab has been removed and has been replaced with a link to a micrometer-fed Grafana dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular has been upgraded to 7.2.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on user feedback added a job restart button inside the execution page of a job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The UI and Data Flow server now support searching audit records by date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/spring-cloud/spring-cloud-dataflow/blob/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/dataflow-audit-records-list-app-reg.png?raw=true" alt="The Spring Cloud Data Flow Audit Dashboard"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="standardize-on-oauth2-and-openid-connect-for-security"&gt;&lt;a class="anchor" href="#standardize-on-oauth2-and-openid-connect-for-security"&gt;&lt;/a&gt;Standardize on OAuth2 and OpenID Connect for Security&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A large amount of effort has gone into improving the security by adopting OAuth2 and OpenID Connect as the default security implementation.  Traditional security options were removed.  The token-based authorization, password-grant type validation, and LDAP integration are a few options, and they are consistently supported with the help of UAA as the backend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.M2/reference/htmlsingle/#configuration-security-customizing-authorization"&gt;New granular roles&lt;/a&gt; to govern the stream/task deployment operations were added.  The granularity brings better alignment with the intended action, and the client-tools (Shell and Dashboard) automatically also adapt to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There is a sample application that shows how to Spring Cloud Data Flow with a &lt;a href="https://github.com/cloudfoundry/uaa"&gt;Cloud Foundry User Account and Authentication&lt;/a&gt; (UAA) Server backed by Lightweight Directory Access Protocol (LDAP) security.  Also available is documentation and sample code showing how to &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#_data_flow_template_and_security"&gt;configure the &lt;code&gt;DataFlowTemplate&lt;/code&gt; for use with OAuth2.0&lt;/a&gt;.
Dependent libraries that had recent CVEs reported were updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following video provides a walkthrough of the new OAuth2 security features and a composed task example using an LDAP backed UAA:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dn-1-YzBvMU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="revamped-metrics-and-monitoring-of-deployed-applications"&gt;&lt;a class="anchor" href="#revamped-metrics-and-monitoring-of-deployed-applications"&gt;&lt;/a&gt;Revamped metrics and monitoring of deployed applications&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Data Flow 2.0 introduces a new architecture for collecting and displaying application metrics for Streams.  The Data Flow Metrics Collector introduced in Data Flow 1.4 has been removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/micrometer-arch.png" alt="Monitoring Architecture"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This new architecture is based on using the &lt;a href="http://micrometer.io/"&gt;Micrometer library&lt;/a&gt; in the deployed applications to send metrics to popular monitoring systems and then visualizing the metrics with &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.
Each application in the &lt;a href="https://cloud.spring.io/spring-cloud-stream-app-starters/"&gt;Einstein release train of the application starters&lt;/a&gt; contains Micrometer libraries for Prometheus, InfluxDB and DataDog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We have provided instructions on how to get started using &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#streams-monitoring-local-prometheus"&gt;Prometheus&lt;/a&gt; and &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#streams-monitoring-local-influx"&gt;InfluxDB&lt;/a&gt; as the monitoring system for Data Flow running locally on your laptop.  There are also instructions on how to get started using &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RELEASE/reference/htmlsingle/#streams-monitoring-kubernetes-prometheus"&gt;Prometheus as the monitoring system when running Data Flow on Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Links to the Grafana dashboard from the Data Flow UI are also provided.  Two Grafana dashboards are also provided, one that shows a more application centric view and other that show a more stream based view.  Here is a screenshot of the Grafana dashboard based on Prometheus showing the message rates for the applications in a stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/grafana-prometheus-scdf-applications-dashboard.png" alt="Grafana Dashboard for applications in a stream"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Selectors for applications and streams allows you to navigate down to specific areas of interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here is a short video showing the Stream monitoring in action.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wDVV-25jf8Q" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="updated-analytics-using-micrometer"&gt;&lt;a class="anchor" href="#updated-analytics-using-micrometer"&gt;&lt;/a&gt;Updated analytics using micrometer&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In Data Flow 2.0, the use of Redis counters has been replaced with counters provided by the Micrometer library.
The Einstein release train of application starters now provide a &lt;a href="https://docs.spring.io/spring-cloud-stream-app-starters/docs/Einstein.RELEASE/reference/htmlsingle/#spring-cloud-stream-modules-counter-processor"&gt;Counter Processor&lt;/a&gt; and a &lt;a href="https://docs.spring.io/spring-cloud-stream-app-starters/docs/Einstein.RELEASE/reference/htmlsingle/#spring-cloud-stream-modules-counter-sink"&gt;Counter Sink&lt;/a&gt;.  &lt;a href="https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#spring-cloud-data-flow-samples-twitter-analytics-overview"&gt;The twitter analytics sample application&lt;/a&gt; has been updated to use the new counter implementation and a Grafana Dashboard is provided to show the equivalent view of what the Data Flow Analytics UI had previously shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/images/twitter_analytics.png" alt="Grafana Dashboard for Twitter Analytics"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here is a short video showing the new analytics functionality in action.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hWLhrXIepLs" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="database-migration-support"&gt;&lt;a class="anchor" href="#database-migration-support"&gt;&lt;/a&gt;Database migration support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Flyway migration code has been improved and tested across all supported databases using a suite of &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-acceptance-tests/blob/master/acceptance-tests/spring-cloud-dataflow-acceptance-tests/src/test/java/org/springframework/cloud/dataflow/acceptance/tests/DataflowServerMigrationTests.java"&gt;Docker based integration tests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="update-to-boot-2-1"&gt;&lt;a class="anchor" href="#update-to-boot-2-1"&gt;&lt;/a&gt;Update to Boot 2.1&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Data Flow Server 2.0 release is now based on Spring Boot 2.1.  With this foundation shift we took some time to address technical debt and adopt to new features from Spring Boot.  As we head towards Data Flow 2.0 GA, we will continue to address technical debt areas and some additional internal refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="update-internals-to-use-jpa"&gt;&lt;a class="anchor" href="#update-internals-to-use-jpa"&gt;&lt;/a&gt;Update internals to use JPA&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Coming from Spring XD to Data Flow 1.x, we retained a few 'key-value' like tables and managed them via Spring JDBC APIs.  We now updated to use Spring Data JPA.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="task-job-execution-and-performance-improvements"&gt;&lt;a class="anchor" href="#task-job-execution-and-performance-improvements"&gt;&lt;/a&gt;Task/Job Execution and Performance improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Thanks to the community member Nicolas Widart for his thorough &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues/2583"&gt;bug report&lt;/a&gt; on the task-execution and the performance issues associated with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A new endpoint was added to avoid breaking changes to the existing REST resource which is now used behind the scenes in the client tools. With these changes, queries for task/batch execution history are almost 10x faster, helping when there are hundreds of steps in a batch job.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While we have a few features in mind for 2.1, the focus on the next couple of months will be on documentation, getting started guides, videos and overall user experience.  A new site for Data Flow is planned as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also note that the 1.x line of Spring Cloud Data Flow will cease maintenance twelve months from this 2.0 GA announcement date, March 7th, 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="stay-in-touch"&gt;&lt;a class="anchor" href="#stay-in-touch"&gt;&lt;/a&gt;Stay in touch&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Flight of the Flux 1 - Assembly vs Subscription</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/06/flight-of-the-flux-1-assembly-vs-subscription" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Simon Baslé</name>
    </author>
    <id>tag:spring.io,2019-02-20:3570</id>
    <updated>2019-03-06T15:41:00Z</updated>
    <content type="html">&lt;p&gt;This blog post is the first in a series of posts that aim at providing a deeper look into &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor&lt;/a&gt;&amp;rsquo;s more advanced concepts and inner workings.&lt;/p&gt;
&lt;p&gt;It is derived from my &lt;code&gt;Flight of the Flux&lt;/code&gt; talk, which content I found to be more adapted to a blog post format.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll update the table below with links when the other posts are published, but here is the planned content:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Assembly vs Subscription (this post)&lt;/li&gt;
  &lt;li&gt;Debugging caveats&lt;/li&gt;
  &lt;li&gt;Concurrent Agnostic&lt;/li&gt;
  &lt;li&gt;Schedulers and &lt;code&gt;publishOn&lt;/code&gt; vs &lt;code&gt;subscribeOn&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inner workings: work stealing&lt;/li&gt;
  &lt;li&gt;Inner workings: operator fusion&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re missing an introduction to &lt;em&gt;Reactive Streams&lt;/em&gt; and the basic concepts of Reactor, head out to the site&amp;rsquo;s &lt;a href="https://projectreactor.io/learn"&gt;learning section&lt;/a&gt; and the &lt;a href="https://projectreactor.io/docs/core/release/reference"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without further ado, let&amp;rsquo;s jump in:&lt;/p&gt;&lt;h2&gt;&lt;a href="#assembly-time" class="anchor" name="assembly-time"&gt;&lt;/a&gt;Assembly Time&lt;/h2&gt;
&lt;p&gt;When you first learn about &lt;em&gt;Reactive Streams&lt;/em&gt; and &lt;em&gt;reactive programming&lt;/em&gt; on the JVM, the first thing you learn is the high-level relationship between &lt;code&gt;Publisher&lt;/code&gt; and &lt;code&gt;Subscriber&lt;/code&gt;: one produces data, the other consumes it. Simple right? Furthermore, it appears that the &lt;code&gt;Publisher&lt;/code&gt; &lt;strong&gt;pushes&lt;/strong&gt; data to the &lt;code&gt;Subscriber&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But when working with Reactive Streams libraries like Reactor (or RxJava2), you quickly come across the following mantra:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nothing Happens Until You Subscribe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes, you might read that both libraries implement a &amp;ldquo;push-pull hybrid model&amp;rdquo;. Hang on a minute! &lt;strong&gt;pull&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll get back to it, but to understand that sentence you first need to realize that, by default, Reactor&amp;rsquo;s reactive types are &lt;em&gt;lazy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Calling methods on a &lt;code&gt;Flux&lt;/code&gt; or &lt;code&gt;Mono&lt;/code&gt; (the &lt;em&gt;operators&lt;/em&gt;) doesn&amp;rsquo;t immediately trigger the behavior. Instead, a new instance of &lt;code&gt;Flux&lt;/code&gt; (or &lt;code&gt;Mono&lt;/code&gt;) is returned, on which you can continue composing further operators. You thus create a &lt;em&gt;chain of operators&lt;/em&gt; (or an operator acyclic graph), which represents your &lt;strong&gt;asynchronous processing pipeline&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;declarative&lt;/strong&gt; phase is called &lt;strong&gt;assembly time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux&amp;lt;HttpResponse&amp;gt; httpSource = makeHttpRequest();&#xD;
Flux&amp;lt;Json&amp;gt; jsonSource = httpSource.map(req -&amp;gt; parseJson(req));&#xD;
Flux&amp;lt;String&amp;gt; quote = jsonSource.map(json -&amp;gt; json.getString(&amp;quot;quote&amp;quot;));&#xD;
//at this point, no HTTP request has been made
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be simplified using the fluent API:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux&amp;lt;String&amp;gt; quote = makeHttpRequest()&#xD;
    .map(req -&amp;gt; parseJson(req))&#xD;
    .map(json -&amp;gt; json.getString(&amp;quot;quote&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you are done declaring your pipeline, there are two situations: either you pass the &lt;code&gt;Flux&lt;/code&gt;/&lt;code&gt;Mono&lt;/code&gt; representing the processing pipeline down to another piece of code or you trigger the pipeline.&lt;/p&gt;
&lt;p&gt;The former means that the code to which you return the &lt;code&gt;Flux&lt;/code&gt; might apply other operators, resulting in a derived new pipeline. Since the operators create new instances (it&amp;rsquo;s like an onion), your own &lt;code&gt;Flux&lt;/code&gt; is not mutated, so it could be further decorated several times with widely different results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;//you could derive a `Flux&amp;lt;String&amp;gt;` of odd-length strings vs even-length ones&#xD;
Flux&amp;lt;String&amp;gt; evenLength = quote.filter(str -&amp;gt; str.length() % 2 == 0);&#xD;
Flux&amp;lt;String&amp;gt; oddLength = quote.filter(str -&amp;gt; str.length() % 2 == 1);&#xD;
&#xD;
//or even a `Flux&amp;lt;String&amp;gt;` of words in a quote&#xD;
Flux&amp;lt;String&amp;gt; words = quote.flatMap(quote -&amp;gt; Flux.fromArray(quote.split(&amp;quot; &amp;quot;)));&#xD;
&#xD;
//by this point, none of the 3 &amp;quot;pipelines&amp;quot; have triggered an HTTP request
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare that with a &lt;code&gt;CompletableFuture&lt;/code&gt;, which is not lazy in nature: once you have a reference to the &lt;code&gt;CompletableFuture&lt;/code&gt;, it means the processing is already ongoing&amp;hellip;&lt;/p&gt;
&lt;p&gt;With that in mind, let&amp;rsquo;s look into how to trigger the reactive pipeline.&lt;/p&gt;&lt;h2&gt;&lt;a href="#subscription-time" class="anchor" name="subscription-time"&gt;&lt;/a&gt;Subscription Time&lt;/h2&gt;
&lt;p&gt;So far, we&amp;rsquo;ve &lt;em&gt;assembled an asynchronous pipeline&lt;/em&gt;. That is, we&amp;rsquo;ve instantiated &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; variables through the use of &lt;em&gt;operators&lt;/em&gt;, that results in &lt;code&gt;Flux&lt;/code&gt; with behavior layered like an onion.&lt;/p&gt;
&lt;p&gt;But the data hasn&amp;rsquo;t started flowing through each of these declared pipelines yet.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s because the trigger for the data to flow is not the declaration of the pipeline, but rather the &lt;strong&gt;subscription&lt;/strong&gt; to it. Remember:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nothing Happens Until You Subscribe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Subscribing is the act of saying &amp;ldquo;ok, this pipeline represent a transformation of data, and I&amp;rsquo;m interested in the final form of that data&amp;rdquo;. The most common way of doing so is by calling &lt;code&gt;Flux.subscribe(valueConsumer, errorConsumer)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That signalling of interest is propagated backwards through the chain of operators, up until the &lt;em&gt;source&lt;/em&gt; operator, the &lt;code&gt;Publisher&lt;/code&gt; that actually produces the initial data:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;makeHttpRequest() //&amp;lt;5&amp;gt;&#xD;
    .map(req -&amp;gt; parseJson(req)) //&amp;lt;4&amp;gt;&#xD;
    .map(json -&amp;gt; json.getString(&amp;quot;quote&amp;quot;)) //&amp;lt;3&amp;gt;&#xD;
    .flatMap(quote -&amp;gt; Flux.fromArray(quote.split(&amp;quot; &amp;quot;))) //&amp;lt;2&amp;gt;&#xD;
    .subscribe(System.out::println, Throwable::printStackTrace); //&amp;lt;1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;we subscribe to the words &lt;code&gt;Flux&lt;/code&gt;, stating that we want to print each word to the console (and print the stack trace of any error)&lt;/li&gt;
  &lt;li&gt;that interest is signalled to the &lt;code&gt;flatMap&lt;/code&gt; step&amp;hellip;&lt;/li&gt;
  &lt;li&gt;&amp;hellip;which signals it up the chain to the json &lt;code&gt;map&lt;/code&gt; step&amp;hellip;&lt;/li&gt;
  &lt;li&gt;&amp;hellip;then the request &lt;code&gt;map&lt;/code&gt; step&amp;hellip;&lt;/li&gt;
  &lt;li&gt;&amp;hellip;to finally reach the &lt;code&gt;makeHttpRequest()&lt;/code&gt; (which we&amp;rsquo;ll consider our source)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the source is triggered. It generates the data in the appropriate way: here it would make an HTTP request to a JSON-producing endpoint and then emit the HTTP response.&lt;/p&gt;
&lt;p&gt;From there on, we&amp;rsquo;re in &lt;em&gt;execution time&lt;/em&gt;. The data has started flowing through the pipeline (in the more natural top-to-bottom order, or &lt;em&gt;upstream&lt;/em&gt; to &lt;em&gt;downstream&lt;/em&gt;):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The &lt;code&gt;HttpResponse&lt;/code&gt; is emitted to the &lt;code&gt;parseJson&lt;/code&gt; &lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It extracts the JSON body and emits it to the &lt;code&gt;getString&lt;/code&gt; &lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Which extracts the &lt;em&gt;quote&lt;/em&gt; and passes it to the &lt;code&gt;flatMap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;flatMap&lt;/code&gt; splits the quote into words and emit each word individually&lt;/li&gt;
  &lt;li&gt;The value handler in the &lt;code&gt;subscribe&lt;/code&gt; is notified of each word, printing these to the console, one per line&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully that helps you understand the difference between assembly time and subscription/execution time!&lt;/p&gt;&lt;h2&gt;&lt;a href="#cold-vs-hot" class="anchor" name="cold-vs-hot"&gt;&lt;/a&gt;Cold vs Hot&lt;/h2&gt;
&lt;p&gt;Right after explaining the difference and introducing this mantra is probably a good time to introduce an exception :laughing: &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nothing happens until you subscribe&amp;hellip; &lt;strong&gt;until something does&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3&gt;&lt;a href="#cold" class="anchor" name="cold"&gt;&lt;/a&gt;Cold&lt;/h3&gt;
&lt;p&gt;So far, we&amp;rsquo;ve been dealing with a flavor of &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; sources called a &lt;strong&gt;Cold &lt;code&gt;Publisher&lt;/code&gt;&lt;/strong&gt;. As we&amp;rsquo;ve explained, these &lt;code&gt;Publishers&lt;/code&gt; are lazy and only generate data when there is a &lt;code&gt;Subscription&lt;/code&gt;. Furthermore, they generate the data anew for each individual &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example of an HTTP response &lt;code&gt;Flux&lt;/code&gt;, the HTTP request would be performed for each subscription: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux&amp;lt;String&amp;gt; evenLength = quote.filter(str -&amp;gt; str.length() % 2 == 0);&#xD;
Flux&amp;lt;String&amp;gt; oddLength = quote.filter(str -&amp;gt; str.length() % 2 == 1);&#xD;
Flux&amp;lt;String&amp;gt; words = quote.flatMap(quote -&amp;gt; Flux.fromArray(quote.split(&amp;quot; &amp;quot;)));&#xD;
&#xD;
evenLength.subscribe(); //this triggers an HTTP request&#xD;
oddLength.subscribe(); //this triggers another HTTP request&#xD;
words.subscribe(); //this triggers a third HTTP request
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a side note, some operators&amp;rsquo; behavior imply multiple subscriptions. For example &lt;code&gt;retry&lt;/code&gt; re-subscribe to its source in case of an error (&lt;code&gt;onError&lt;/code&gt; signal), while &lt;code&gt;repeat&lt;/code&gt; does the same for the &lt;code&gt;onComplete&lt;/code&gt; signal.&lt;/p&gt;
&lt;p&gt;So for a cold source like the HTTP request, something like &lt;code&gt;retry&lt;/code&gt; would re-perform the request thus allowing to recover from a transient server-side error, for instance.&lt;/p&gt;&lt;h3&gt;&lt;a href="#hot" class="anchor" name="hot"&gt;&lt;/a&gt;Hot&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Hot &lt;code&gt;Publisher&lt;/code&gt;&lt;/strong&gt; on the other hand isn&amp;rsquo;t as clear-cut: it doesn&amp;rsquo;t necessarily need a &lt;code&gt;Subscriber&lt;/code&gt; to start pumping data. It doesn&amp;rsquo;t necessarily re-generate dedicated data per each new &lt;code&gt;Subscriber&lt;/code&gt; either.&lt;/p&gt;
&lt;p&gt;To illustrate that, let&amp;rsquo;s introduce a new cold publisher example, then we&amp;rsquo;ll show how to turn that &lt;em&gt;cold&lt;/em&gt; publisher into a &lt;em&gt;hot&lt;/em&gt; one:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux&amp;lt;Long&amp;gt; clockTicks = Flux.interval(Duration.ofSeconds(1));&#xD;
&#xD;
clockTicks.subscribe(tick -&amp;gt; System.out.println(&amp;quot;clock1 &amp;quot; + tick + &amp;quot;s&amp;quot;);&#xD;
&#xD;
Thread.sleep(2000);&#xD;
&#xD;
clockTicks.subscribe(tick -&amp;gt; System.out.println(&amp;quot;\tclock2 &amp;quot; + tick + &amp;quot;s&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prints:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;clock1 1s&#xD;
clock1 2s&#xD;
clock1 3s&#xD;
    clock2 1s&#xD;
clock1 4s&#xD;
    clock2 2s&#xD;
clock1 5s&#xD;
    clock2 3s&#xD;
clock1 6s&#xD;
    clock2 4s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can turn the &lt;code&gt;clockTicks&lt;/code&gt; source into a hot one by invoking &lt;code&gt;share()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux&amp;lt;Long&amp;gt; coldTicks = Flux.interval(Duration.ofSeconds(1));&#xD;
Flux&amp;lt;Long&amp;gt; clockTicks = coldTicks.share();&#xD;
&#xD;
clockTicks.subscribe(tick -&amp;gt; System.out.println(&amp;quot;clock1 &amp;quot; + tick + &amp;quot;s&amp;quot;);&#xD;
&#xD;
Thread.sleep(2000);&#xD;
&#xD;
clockTicks.subscribe(tick -&amp;gt; System.out.println(&amp;quot;\tclock2 &amp;quot; + tick + &amp;quot;s&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It yields the following result instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;clock1 1s&#xD;
clock1 2s&#xD;
clock1 3s&#xD;
    clock2 3s&#xD;
clock1 4s&#xD;
    clock2 4s&#xD;
clock1 5s&#xD;
    clock2 5s&#xD;
clock1 6s&#xD;
    clock2 6s&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You see that the two subscriptions now share the same ticks of the clock. &lt;code&gt;share()&lt;/code&gt; converts cold to hot by letting the source multicast elements to new &lt;code&gt;Subscribers&lt;/code&gt;, but &lt;strong&gt;only the elements that are emitted after these new subscriptions&lt;/strong&gt;. Since &lt;code&gt;clock2&lt;/code&gt; has subscribed 2 seconds later, it missed early emissions &lt;code&gt;1s&lt;/code&gt; and &lt;code&gt;2s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So hot publishers can be less lazy, even though they generally require at least an initial &lt;code&gt;Subscription&lt;/code&gt; to trigger data flow.&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we&amp;rsquo;ve learned about the difference between instantiating a &lt;code&gt;Flux&lt;/code&gt; / chaining operator (aka &lt;strong&gt;Assembly time&lt;/strong&gt;), triggering it (aka &lt;strong&gt;Subscription time&lt;/strong&gt;) and executing it (aka &lt;strong&gt;Execution time&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve thus learned that &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; are mostly lazy (aka &lt;strong&gt;cold &lt;code&gt;Publisher&lt;/code&gt;&lt;/strong&gt;): &lt;strong&gt;nothing happens until you subscribe&lt;/strong&gt; to them.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ve learned about an alternative flavor of &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt;, dubbed the &lt;strong&gt;hot &lt;code&gt;Publisher&lt;/code&gt;&lt;/strong&gt;, which behaves a little differently and is less lazy.&lt;/p&gt;
&lt;p&gt;In the next instalment, we&amp;rsquo;ll see why these three phases make a major difference in how you as a developer would debug reactor-based code.&lt;/p&gt;
&lt;p&gt;In the meantime, happy reactive coding!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring  - March 5th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/05/this-week-in-spring-march-5th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-03-05:3594</id>
    <updated>2019-03-05T23:29:54Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! I flew 14 hours to Tel Aviv, Israel. I then spent 28h on the ground visiting customers, visiting &lt;a href="https://twitter.com/starbuxman/status/1103056979201806337"&gt;my friends at Codota&lt;/a&gt;, and then presenting at a packed house at &lt;a href="https://twitter.com/odedia/status/1102610921908781056"&gt;the Israel Java User Group&lt;/a&gt;. Then I flew another 14 hours back to San Francisco, CA where I presented for a four-hour online course on using Kotlin with Spring Boot. Tonight I&amp;rsquo;ll fly to Atlanta, GA for the incredible DevNexus conference where I&amp;rsquo;ll be presenting (twice) with the &lt;a href="https://devnexus.com/presentations/3545/"&gt;good Dr. Venkat Subramaniam&lt;/a&gt; on Kotlin (and Spring) and more. Tomorrow, I&amp;rsquo;m doing &lt;a href="https://www.safaribooksonline.com/live-training/courses/bootiful-testing/0636920239550/"&gt;a four hour course on testing. Join me!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And, of course we&amp;rsquo;ve got a lot to get to today so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/05/spring-hateoas-1-0-m1-released"&gt;Spring HATEOAS 1.0 M1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/05/spring-initializr-new-ui"&gt;Spring Initializr: new UI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/04/java-cfenv-1-0-ga-released"&gt;java-cfenv 1.0 GA Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/01/reactor-project-lead-st-phane-maldini"&gt;Reactor project lead Stéphane Maldini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/27/java-cfenv-1-0-rc1-released"&gt;java-cfenv 1.0 RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/27/spring-vault-2-1-2-release-available"&gt;Spring Vault 2.1.2.RELEASE available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This post by Dan Baskette gives you a real world example of the power [of continuous integration and pipelines(&lt;a href="https://twitter.com/pivotal/status/1102688418620940290?s=12)"&gt;https://twitter.com/pivotal/status/1102688418620940290?s=12)&lt;/a&gt;, check it out.&lt;/li&gt;
  &lt;li&gt;Pivotal now has three distinct Kubernetes offerings. Whatever you&amp;rsquo;re doing with Kubernetes, &lt;a href="https://twitter.com/benbravo73/status/1102676348185784320?s=12"&gt;we&amp;rsquo;ve got you covered!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out the &lt;a href="https://twitter.com/sdeleuze/status/1102619324404166656?s=12"&gt; exciting new Kotlin-support in the upcoming Spring Framework 5.2 with the &lt;code&gt;MockMvc&lt;/code&gt; DSL. The next step is the Spring REST Docs Kotlin DSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoq.com/presentations/dell-pcf-boot-rest?itm_source=infoq&amp;itm_medium=popular_widget&amp;itm_campaign=popular_content_list&amp;itm_content="&gt;What We&amp;rsquo;re Learning Adopting Spring Boot and PCF for Dell.com&amp;rsquo;s eCommerce&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maciej Walkowiak has updates on the &lt;a href="https://twitter.com/maciejwalkowiak/status/1102520792489881601?s=12"&gt;the Spring Cloud Stream SQS&amp;hellip;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Framework test lead &lt;a href="https://twitter.com/sam_brannen/status/1101527484913332230?s=12"&gt;and JUnit lead Sam Brannen says that Spring Framework 5.2 will support &lt;code&gt;ApplicationEvent&lt;/code&gt; consumption for the Spring &lt;code&gt;TestContext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out how simple it is to integrate &lt;a href="https://twitter.com/pczarkowski/status/1101528946800316421?s=12"&gt;Spring Cloud applications with Kubernetes to allow you to use values in configmaps and secrets as dynamic application properties.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Are you using Project Riff and want to know more about KNative? Check out &lt;a href="https://twitter.com/brianmmcclain/status/1096510041501372421?s=12"&gt;Brian McClain&amp;rsquo;s book, &amp;ldquo;Getting Started With Knative&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting example of how to &lt;a href="https://github.com/rashidi/boot-data-rest-events-sample"&gt;use Spring Data events to perform validation.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Auth0 has a nice tutorial on &lt;a href="https://auth0.com/blog/amp/spring-data-rest-tutorial-developing-rest-apis-with-ease/"&gt;Spring Data REST and developing RESTful APIs with Ease&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Codecentric blog has a nice post on &lt;a href="https://blog.codecentric.de/en/2019/02/how-to-package-your-frontend-in-a-spring-boot-app-with-parceljs/"&gt;how to package your frontend in a Spring Boot App with ParcelJS &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Profiles in &lt;a href="http://www.profesor-p.com/2019/02/28/perfiles-en-spring-boot/"&gt;Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Netifi&amp;rsquo;s CEO has a nice post on how &lt;a href="https://twitter.com/netifi_inc/status/1100821621231808513"&gt;developers benefit from reactive streams, as explained by their CTO(go to 42:55 mark)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Oleh Dokuka has some good insight on the key differences between &lt;code&gt;CompletableFuture&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; &lt;a href="https://twitter.com/olehdokuka/status/1100027900475129856?s=12"&gt;from Project Reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this video showing how to deploy a &lt;a href="https://twitter.com/brunoborges/status/1100913233949413376?s=12"&gt; Spring Boot application to Kubernetes using Helm + Draft + JFrog and Azure Pipelines &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out &lt;a href="https://twitter.com/cloudnativeguy/status/1100826590299201542?s=12"&gt;James Williams&amp;rsquo; Pivotal blog, with input from folks from Snyk Security and Atomist, on a new software solution segment. They are &amp;quot;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring HATEOAS 1.0 M1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/05/spring-hateoas-1-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2019-03-04:3592</id>
    <updated>2019-03-05T16:44:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Dear Spring community, we&amp;#8217;re proud to announce the first milestone of Spring HATEOAS 1.0. Spring HATEOAS has been in development for almost seven years now. What started as tiny extension to Spring MVC became the foundation for Spring Data REST later on and has served as a fundamental building block for hypermedia based APIs in Spring MVC applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We received a lot of input for more advanced features from the community and eventually decided that it was time to integrate those into the library. Also, we gained a significant amount of experience using the library in the wild and thought we should take the chance to reflect those learnings in a 1.0 release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here&amp;#8217;s the summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;General overhaul in package design and domain model language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Java 8 and Spring Framework 5.1 as baseline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced hypermedia support through affordances API (HAL-FORMS, Collection+JSON, UBER).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hypermedia support SPI to plug custom media type implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinkBuilder&lt;/code&gt; implementation for Spring WebFlux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completely overhauled &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Let&amp;#8217;s have a detailed look at some of those features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="overhaul"&gt;&lt;a class="anchor" href="#overhaul"&gt;&lt;/a&gt;Overhaul of packaging and types&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Before releasing 1.0, we took the chance to re-evaluate the package structure as well as the terminology we expose in our domain types. That led to quite a few significant changes compared to our 0.x releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The most fundamental change is the fact that Spring HATEOAS doesn&amp;#8217;t create resources. That&amp;#8217;s what Spring MVC/Spring WebFlux does. We create vendor neutral &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#migrate-to-1.0.changes.representation-models"&gt;representations of hypermedia&lt;/a&gt;. So we renamed those core types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ResourceSupport&lt;/code&gt; is now &lt;code&gt;RepresentationModel&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Resource&amp;lt;T&amp;gt;&lt;/code&gt; is now &lt;code&gt;EntityModel&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Resources&amp;lt;T&amp;gt;&lt;/code&gt; is now &lt;code&gt;CollectionModel&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PagedResources&amp;lt;T&amp;gt;&lt;/code&gt; is now &lt;code&gt;PagedModel&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As a side effect, &lt;code&gt;ResourceAssembler&lt;/code&gt; is now &lt;code&gt;RepresentationModelAssembler&lt;/code&gt; and its methods are now &lt;code&gt;toModel(&amp;#8230;&amp;#8203;)&lt;/code&gt; and &lt;code&gt;toCollection(&amp;#8230;&amp;#8203;)&lt;/code&gt;. There are similar changes throughout the code base reflecting this change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Many APIs are centered on the concept of &lt;code&gt;List&amp;lt;Link&amp;gt;&lt;/code&gt; including &lt;code&gt;RepresentationModel.getLinks()&lt;/code&gt;. Instead of a Java list, we now return &lt;code&gt;Links&lt;/code&gt; which has been significantly enhanced to make it easier to combine, extract, and merge links. The core abstractions &lt;code&gt;LinkBuilder&lt;/code&gt;, &lt;code&gt;EntityLinks&lt;/code&gt;, &lt;code&gt;RelProvider&lt;/code&gt;, &lt;code&gt;LinkDiscoverer&lt;/code&gt; have been grouped into &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;client&lt;/code&gt; packages respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Sound overwhelming?
We&amp;#8217;ve got you covered.
We &lt;a href="https://github.com/spring-projects/spring-hateoas/blob/master/etc/migrate-to-1.0.sh"&gt;wrote a script&lt;/a&gt; that will migrate most of your code to the new types and import statements on a best effort basis.
It may not cover everything, but should vastly ease migration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="webflux"&gt;&lt;a class="anchor" href="#webflux"&gt;&lt;/a&gt;Spring WebFlux support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One of the most critical features in this release is support for Spring WebFlux and Reactive programming. This includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Building links reactively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Serving hypermedia to WebFlux endpoints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for WebFlux&amp;#8217;s &lt;code&gt;WebClient&lt;/code&gt; to consume hypermedia.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring HATEOAS comes with &lt;code&gt;WebFluxLinkBuilder&lt;/code&gt; so you can reactively build links.
It will automatically pick up the base URI hosted by the server and merged it with the path to your endpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="exampleblock"&gt;
&lt;div class="title"&gt;Example 1. Reactively create links and affordances&lt;/div&gt;
&lt;div class="content"&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;import static org.springframework.hateoas.server.reactive.WebFluxLinkBuilder.*;

@GetMapping("/employees")
public Mono&amp;lt;CollectionModel&amp;lt;EntityModel&amp;lt;Employee&amp;gt;&amp;gt;&amp;gt; all() {

  var controller = methodOn(WebFluxEmployeeController.class);

  return Flux.fromIterable(EMPLOYEES.keySet())
    .flatMap(id -&amp;gt; findOne(id))
    .collectList()
    .flatMap(resources -&amp;gt; linkTo(controller.all()).withSelfRel() &lt;b class="conum"&gt;(1)&lt;/b&gt;
      .andAffordance(controller.newEmployee(null)) &lt;b class="conum"&gt;(2)&lt;/b&gt;
      .andAffordance(controller.search(null, null))
      .toMono() &lt;b class="conum"&gt;(3)&lt;/b&gt;
      .map(selfLink -&amp;gt; new CollectionModel&amp;lt;&amp;gt;(resources, selfLink)));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="colist arabic"&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Link to a WebFlux endpoint that has Reactor types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add affordances in a domain-friendly way (read more on that below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hand back a &lt;code&gt;Mono&lt;/code&gt; so you can do any extra Reactor operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Assuming this controller were hosted at &lt;a href="http://example.com" class="bare"&gt;http://example.com&lt;/a&gt;, expect a hypermedia document with links to &lt;a href="http://example.com/employees" class="bare"&gt;http://example.com/employees&lt;/a&gt; to be served up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to building links reactively, your WebFlux endpoints will now render hypermedia when you return a &lt;a href="#overhaul"&gt;&lt;code&gt;RepresentationModel&lt;/code&gt;&lt;/a&gt;-based type, whether or not it&amp;#8217;s wrapped in a Reactor type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="affordances"&gt;&lt;a class="anchor" href="#affordances"&gt;&lt;/a&gt;Affordances&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Something we have been developing over the past two years are &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#fundamentals.affordances"&gt;Affordances&lt;/a&gt;.
We got valuable input by &lt;a href="https://github.com/dschulten"&gt;@dschulten&lt;/a&gt; from Escalon and the team around &lt;a href="https://github.com/anderruiz"&gt;@anderruiz&lt;/a&gt; at HDIV Security on how to gather metadata to render more advanced media types that describe resource interaction in much more detail than the already supported HAL.
You saw a snippet of that metadata gathering API in the WebFlux endpoint up above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By linking related operations together, it&amp;#8217;s possible to generate affordance-aware media types like HAL-FORMS (shown below):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="exampleblock"&gt;
&lt;div class="title"&gt;Example 2. HAL-FORMS example output generated from the affordance API&lt;/div&gt;
&lt;div class="content"&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-json" data-lang="json"&gt;{
  "firstName" : "Frodo",
  "lastName" : "Baggins",
  "role" : "ring bearer",
  "_links" : {
    "self" : {
      "href" : "http://localhost:8080/employees/1"
    }
  },
  "_templates" : {
    "default" : {
      "title" : null,
      "method" : "put",
      "contentType" : "",
      "properties" : [ {
        "name" : "firstName",
        "required" : true
      }, {
        "name" : "lastName",
        "required" : true
      }, {
        "name" : "role",
        "required" : true
      } ]
    },
    "partiallyUpdateEmployee" : {
      "title" : null,
      "method" : "patch",
      "contentType" : "",
      "properties" : [ {
        "name" : "firstName",
        "required" : false
      }, {
        "name" : "lastName",
        "required" : false
      }, {
        "name" : "role",
        "required" : false
      } ]
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This affordance-aware media type provides all the information you need to perform updates to this resource.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="mediatypes"&gt;&lt;a class="anchor" href="#mediatypes"&gt;&lt;/a&gt;New media types&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Speaking of HAL-FORMs, we&amp;#8217;ve added &lt;em&gt;several&lt;/em&gt; new media types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#mediatypes.hal-forms"&gt;HAL-FORMS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#mediatypes.collection-json"&gt;Collection+JSON&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#mediatypes.uber"&gt;UBER&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;But why stop there?
While we are planning to support other media types, it shouldn&amp;#8217;t stop you from creating your own.
We&amp;#8217;ve introduce a new SPI that lets you write &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/#mediatypes.custom"&gt;your own custom media type&lt;/a&gt; and register it with Spring HATEOAS so you can use it with Spring MVC, &lt;code&gt;RestTemplate&lt;/code&gt; beans, Spring WebFlux, and &lt;code&gt;WebClient&lt;/code&gt; beans.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="ref-docs"&gt;&lt;a class="anchor" href="#ref-docs"&gt;&lt;/a&gt;Updated and enhanced documentation&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Not sure if you&amp;#8217;ve noticed, but the Spring team has been upgrading all of its documentation.
We have too!
We have also started to &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/reference/html/"&gt;clean up and overhaul the content&lt;/a&gt;, so be sure to take a tour.
We&amp;#8217;re going to tweak more of this in the upcoming milestones.
Anything missing? Let us know! With over &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.0.0.M1/changelog.txt"&gt;80 closed issues&lt;/a&gt;, be sure to check things out.
And let us know what you think!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-data-rest"&gt;&lt;a class="anchor" href="#spring-data-rest"&gt;&lt;/a&gt;Spring Data REST&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One cannot discuss Spring HATEOAS without mentioning Spring Data REST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;All of these changes coming with Spring HATEOAS are being picked up and adapted to in Spring Data REST&amp;#8217;s latest snapshot releases. The overall plan is for Spring Data - Release train &lt;strong&gt;Moore&lt;/strong&gt; to upgrade to Spring HATEOAS 1.0. That means things like affordances and new media types will become a part of Spring Data REST.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-framework-5-1-support"&gt;&lt;a class="anchor" href="#spring-framework-5-1-support"&gt;&lt;/a&gt;Spring Framework 5.1 support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring HATEOAS 1.0 is now based upon Spring Framework 5.1. This means that things like &lt;strong&gt;Forwarded&lt;/strong&gt; header handling is delegated to Spring Framework to manage. If you&amp;#8217;re proxy server in front of your application is sending proper headers, and your Spring HATEOAS powered API is suddenly NOT rewriting URIs, you need to configure header handling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you are using Spring Boot, this is all you need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre&gt;server.use-forward-headers=true&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you are NOT using Spring Boot, then you must configure something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
public FilterRegistrationBean&amp;lt;ForwardedHeaderFilter&amp;gt; forwardedHeaderFilter() {

  var filter = new FilterRegistrationBean&amp;lt;&amp;gt;();
  filter.setFilter(new ForwardedFilter());

  return filter;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more details check out &lt;a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#filters-forwarded-headers"&gt;Spring Framework&amp;#8217;s Forwarded header filter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Check out the project links below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Links: &lt;a href="http://spring.io/projects/spring-hateoas"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-hateoas"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-hateoas/issues"&gt;Issues&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Being a milestone release, you&amp;#8217;ll find the artifacts at &lt;a href="https://repo.spring.io/libs-milestone" class="bare"&gt;https://repo.spring.io/libs-milestone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Initializr: new UI</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/05/spring-initializr-new-ui" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Damien Vitrac</name>
    </author>
    <id>tag:spring.io,2019-03-04:3591</id>
    <updated>2019-03-05T09:45:42Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I’m happy to announce that &lt;strong&gt;Spring Initializr&lt;/strong&gt; has been updated and is now available on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-short-history-of-spring-initializr" class="anchor" name="a-short-history-of-spring-initializr"&gt;&lt;/a&gt;A short history of Spring Initializr&lt;/h2&gt;
&lt;p&gt;The project started out as a minimal HTML form, letting you generate a Spring Boot application with a few options. It&amp;rsquo;s been well received by the Spring community, so the team added new ways to interact with it, through the command-line or your favorite IDE.&lt;/p&gt;
&lt;p&gt;After a while, we decided to work on a first revision of the UI. We simplified the form, leaving the essential parts front and center and pushing others in a section hidden by default. Given the number of dependencies, we created a search box to look for available starters.&lt;/p&gt;
&lt;p&gt;The project is now a popular service and even a library that you can use and extend for your own needs. These days, the Web UI is not even the most popular client, but we&amp;rsquo;re still committed to work and improve the service.&lt;/p&gt;&lt;h2&gt;&lt;a href="#rationale-behind-the-new-web-design" class="anchor" name="rationale-behind-the-new-web-design"&gt;&lt;/a&gt;Rationale behind the new Web design&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the updated design.&lt;/p&gt;
&lt;img src="https://i.imgur.com/SBl70J1.png" /&gt;
&lt;p&gt;The Spring Initializr team has been tempted many times to add new features and options, or solve new problems. Should we generate complex builds to work around projects&amp;rsquo; limitations? Should we add more opinions around how to build, distribute or run your Spring Boot application in production? Should we turn it in a full-blown Spring Boot starter marketplace?&lt;/p&gt;
&lt;p&gt;With this new revision, the design in general had a (much needed) refresh and we chose to not display anymore the full list of available dependencies. One could see that list as a way to work around poor project metadata (&lt;a href="https://github.com/spring-io/start.spring.io/commit/359770b9e1e2e92be623788f3bdaecc515af84ee"&gt;we should&lt;/a&gt; &lt;a href="https://github.com/spring-io/start.spring.io/commit/ed082500830091e415cba6b2a99961037de97ed9"&gt;improve those!&lt;/a&gt;) or a lack of discovery mechanism on the spring.io website (&lt;a href="https://github.com/spring-io/sagan/issues/893"&gt;we should fix that!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;While we recognize its current limitations, we feel that &amp;ldquo;quickly bootstrapping a Spring Boot application that just runs&amp;rdquo; is still the core promise of our service and developers should know what type of application they want to build when creating a project.&lt;br/&gt;Still, we think that the Spring Boot team could do more about helping developers to grow and update their applications, so we&amp;rsquo;re working on expanding what Spring Initializr can do (see our&lt;br/&gt;&lt;a href="https://spring.io/blog/2019/02/20/what-s-new-with-spring-initializr"&gt;previous blog post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This new revision is a new step towards more changes on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;, so stay tuned!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>java-cfenv 1.0 GA Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/04/java-cfenv-1-0-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2019-03-04:3593</id>
    <updated>2019-03-04T22:11:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The java-cfenv library is a new library for accessing Cloud Foundry Services.  For Spring Boot users, it extracts service credentials from the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable and sets well known Spring Boot auto-configuration properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find more about it in the &lt;a href="https://spring.io/blog/2019/02/15/introducing-java-cfenv-a-new-library-for-accessing-cloud-foundry-services"&gt;1.0 M1 release blog&lt;/a&gt; as well as the &lt;a href="https://github.com/pivotal-cf/java-cfenv/blob/master/README.adoc"&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this release the following Cloud Foundry Services are supported&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Databases - DB2, MySQL, Oracle, Postgresql, SqlServer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandra&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivotal Single Sign On&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Of note, there is a new interface, &lt;a href="https://github.com/pivotal-cf/java-cfenv/blob/master/java-cfenv-boot/src/main/java/io/pivotal/cfenv/spring/boot/CfEnvProcessor.java"&gt;CfEnvProcessor&lt;/a&gt; that simplifies what you need to write in order to provide integration with other Cloud Foundry services.  The docs on &lt;a href="https://github.com/pivotal-cf/java-cfenv#supporting-other-services"&gt;supporting other services&lt;/a&gt; has the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The 1.0 release is available in maven central through the dependency&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;io.pivotal.cfenv&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;java-cfenv-boot&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0.0.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We will be releasing a 1.0.1.RELEASE shortly to fix issues in config server client configuration when using Pivotal Spring Cloud Services tile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Thanks to &lt;a href="https://spring.io/team/scottfrederick"&gt;Scott Frederick&lt;/a&gt; and &lt;a href="https://spring.io/team/dturanski"&gt;David Turanski&lt;/a&gt; for their contributions!&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Reactor project lead Stéphane Maldini</title>
    <link rel="alternate" href="https://spring.io/blog/2019/03/01/reactor-project-lead-st-phane-maldini" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-03-01:3590</id>
    <updated>2019-03-01T03:10:18Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! This week I&amp;rsquo;m excited to sit down and talk with mr. Reactive himself, Reactor project lead Stéphane Maldini. In this interview we talk about the history of the reactive programming for Spring, the Reactor project&amp;rsquo;s evolution over time, from then to now and looking forward.&lt;/p&gt;
&lt;p&gt;the &lt;a href="http://ProjectReactor.io"&gt;Project Reactor website&lt;/a&gt;&lt;br/&gt;&lt;a href="@smaldini"&gt;Stéphane on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/582654270&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>java-cfenv 1.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/27/java-cfenv-1-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2019-02-27:3588</id>
    <updated>2019-02-27T22:42:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The java-cfenv library is new library for accessing Cloud Foundry Services.  For Spring Boot users, it extracts service credentials from the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable and sets well known Spring Boot auto-configuration properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this release the following Cloud Foundry Services are supported&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Databases - DB2, MySQL, Oracle, Postgresql, SqlServer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandara&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In 1.0 RC1 two other modules were introduced that contain support for Pivotal’s Spring Cloud Service and Single Sign on tiles. The &lt;code&gt;java-cfenv-boot-pivotal-scs&lt;/code&gt; module provides support for Config Server and &lt;code&gt;java-cfenv-boot-pivotal-sso&lt;/code&gt; module provides support for single sign on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There is a new interface, &lt;a href="https://github.com/pivotal-cf/java-cfenv/blob/master/java-cfenv-boot/src/main/java/io/pivotal/cfenv/spring/boot/CfEnvProcessor.java"&gt;CfEnvProcessor&lt;/a&gt; that simplifies what you need to write in order to provide integration with other Cloud Foundry services.  The docs on &lt;a href="https://github.com/pivotal-cf/java-cfenv#supporting-other-services"&gt;supporting other services&lt;/a&gt; has the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Thanks to &lt;a href="https://spring.io/team/scottfrederick"&gt;Scott Frederick&lt;/a&gt; and &lt;a href="https://spring.io/team/dturanski"&gt;David Turanski&lt;/a&gt; for their contributions!&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.1.2.RELEASE available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/27/spring-vault-2-1-2-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2019-02-27:3587</id>
    <updated>2019-02-27T15:44:57Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;d like to announce the availability of the Spring Vault service release 2.1.2 available from Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release ships with bug fixes and dependency version updates. Spring Vault 2.1.2 is going to be picked up by Spring Cloud Vault 2.1.2 with the Spring Cloud Greenwich SR1 release in the next days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a complete list of changes see the &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.2.RELEASE/changelog.txt"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="end-of-life-for-1-1-x-and-2-0-x-lines"&gt;&lt;a class="anchor" href="#end-of-life-for-1-1-x-and-2-0-x-lines"&gt;&lt;/a&gt;End of Life for 1.1.x and 2.0.x Lines&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With this release cycle, we have stopped backporting changes to the earlier Spring Vault 2.0.x line. The 2.0.x line has already reached its end of life. For the 1.1.x line, we&amp;#8217;re going to backport fixes until Aug 1st, 2019, in alignment with &lt;a href="https://spring.io/blog/2018/07/30/spring-boot-1-x-eol-aug-1st-2019"&gt;Spring Boot 1.5.x&lt;/a&gt; and &lt;a href="https://spring.io/blog/2018/07/30/spring-cloud-edgware-eol-aug-1st-2019"&gt;Spring Cloud Edgware&lt;/a&gt; EOL dates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.2.RELEASE/reference/html/"&gt;Documentation for 2.1.2.RELEASE&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 26, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/26/this-week-in-spring-february-26-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-02-26:3586</id>
    <updated>2019-02-26T22:02:00Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! What a week! This week I&amp;rsquo;m in San Francisco, CA; Columbus, OH (for the &lt;a href="https://springonetour.io/2019/columbus"&gt;epic SpringOne Tour stop there&lt;/a&gt;), and then it&amp;rsquo;s off to Tel Aviv, Israel for customer visits and an appearance at the &lt;a href="https://www.meetup.com/JavaIL/events/259118206/"&gt;Israel JUG&lt;/a&gt;. If you&amp;rsquo;re around, then I&amp;rsquo;d love to connect! &lt;/p&gt;
&lt;p&gt;Anyway, and as always, we&amp;rsquo;ve got tons to cover so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/26/spring-cloud-finchley-sr3-now-available"&gt;Spring Cloud Finchley.SR3 Now Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://content.pivotal.io/blog/out-of-the-box-application-observability-with-spring-boot-pivotal-cloud-foundry"&gt;Out of the Box Application Observability with Spring Boot &amp;amp; Pivotal Cloud Foundry - Pivotal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://content.pivotal.io/intersect/the-cios-guide-to-kubernetes?_lrsc=8cc3610b-bd30-4319-9210-8558e099fd9d"&gt;The CIO&amp;rsquo;s guide to Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/22/spring-cloud-data-flow-and-skipper-2-0-rc1-released"&gt;Spring Cloud Data Flow and Skipper 2.0 RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/22/spring-tools-4-1-2-released"&gt;Spring Tools 4.1.2 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Last week in &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I &lt;a href="https://spring.io/blog/2019/02/22/a-bootiful-podcast-an-interview-with-sree-tummidi-senior-product-manager-for-security-at-pivotal"&gt;had the privilege of interviewing Sree Tummidi, Senior Product Manager for Security at Pivotal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/21/cve-2019-3778-spring-security-oauth-2-3-5-2-2-4-2-1-4-2-0-17-released"&gt;CVE-2019-3778: Spring Security OAuth 2.3.5, 2.2.4, 2.1.4, 2.0.17 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out the latest-and-greatest in my second favorite place on the internet, &lt;a href="http://start.Spring.io"&gt;start.Spring.io&lt;/a&gt;: &lt;a href="https://spring.io/blog/2019/02/20/what-s-new-with-spring-initializr"&gt;What&amp;rsquo;s new with Spring Initializr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Last week was the recap post for season 5 of Spring Tips where we look at all the episodes from the last season. &lt;a href="https://spring.io/blog/2019/02/20/spring-tips-season-5-recap"&gt;Spring Tips: Season 5 Recap&lt;/a&gt; I&amp;rsquo;m already hard at work on season 6, of course, so stay tuned. If you get through the Season 5 episodes, then you might go back &lt;a href="http://bit.ly/spring-tips-playlist"&gt;and watch the older ones&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out part two of this Flowable BMPN system webinar series &lt;a href="https://twitter.com/jbarrez/status/1100396106649927680?s=12"&gt; where they use serverless functions. Spoiler: they&amp;rsquo;re building a process as a service function using Spring Fu and GraalVM that boots up in 13ms!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tech.paulcz.net/blog/spring-into-kubernetes-part-1/"&gt;Spring into Kubernetes - Part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://t.co/kMXznCq1C7?ssr=true"&gt;RSocket: Reactive Streaming Service Networking with Ryland Degnan - Software Engineering Daily&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Okta blog is &lt;em&gt;killing&lt;/em&gt; it! Check out this latest post on &lt;a href="https://twitter.com/oktadev/status/1100057316236374017?s=12"&gt;OAuth 2.0 device flow and social login for Spring Boot (using reactive Spring, MongoDB, and so much more)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Another great post on the Okta blog, this one &lt;a href="https://developer.okta.com/blog/2019/02/25/java-i18n-internationalization-localization"&gt;i18n (&amp;ldquo;internationalization&amp;rdquo;) in Java 11, Spring Boot, and JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Netifi have put together a collection of YouTube videos related to &lt;a href="https://twitter.com/netifi_inc/status/1100096845924233218?s=12"&gt;RSocket with speakers from Pivotal, Facebook and Netifi &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This isn&amp;rsquo;t strictly speaking related to Spring, but it&amp;rsquo;s interesting: SalesForce&amp;rsquo;s &lt;a href="https://twitter.com/ryanmichela/status/1098372725993697280?s=12"&gt;jProtoc 0.9.0 is out! It&amp;rsquo;s a Java protofuf compiler.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love watching the cool things that Thomas Darimont gets up to. This time he&amp;rsquo;s put together a nice demo on using &lt;a href="https://github.com/thomasdarimont/spring-boot-security-saml-sample/tree/poc/keycloak-saml-idp#run-with-keycloak"&gt;Spring Security, SAML, Spring Boot and IBM/RedHat/JBoss KeyCloak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This post is &lt;em&gt;nuts&lt;/em&gt;! It&amp;rsquo;s how we got &lt;a href="https://bsideup.github.io/posts/jni-cross-compilation/"&gt;JNI cross-compilation with Docker to work in order to create a Java agent to aid developers using Reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you seen &lt;a href="https://github.com/reactor/BlockHound/blob/1.0.0.M1/example/src/test/java/com/example/ReactorTest.java"&gt;BlockHound 1.0.0.M1?&lt;/a&gt; It&amp;rsquo;s a plugin that detects blocked threads in your reactive code.&lt;/li&gt;
  &lt;li&gt;I love this podcast interview with Michael Cote and Paul Czarkowski &lt;a href="https://twitter.com/pivotalcf/status/1098407368273076225?s=12"&gt; on running Spring Boot apps on Kubernetes and more&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Sébastien Deleuze &lt;a href="https://twitter.com/sdeleuze/status/1098576184202485761?s=12"&gt;has some good news to share: it seems next milestone of Spring Data R2DBC will have Kotlin Coroutines support!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A nice post on Mkyong on &lt;a href="http://www.mkyong.com/spring-boot/spring-boot-junit-5-mockito/"&gt;JUnit 5 and Spring Boot and Mockito&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/commit/2be798bb8d907bcf91771400f4834b079c4549bb"&gt;The 2.1.0.RELEASE of Spring Cloud Contract (Greenwich.RELEASE release train) supports binary payloads. Here you can find a commit that adds a sample of how you can use it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Yet another nice post on the Okta blog, this one on adding &lt;a href="https://developer.okta.com/blog/2019/02/19/add-social-login-to-spring-boot"&gt;social login to Your JHipster App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Finchley.SR3 Now Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/26/spring-cloud-finchley-sr3-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Ryan Baxter</name>
    </author>
    <id>tag:spring.io,2019-02-25:3575</id>
    <updated>2019-02-26T15:42:20Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Service Release 3 (SR3) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud Finchley&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="http://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/Finchley.SR3/"&gt;Maven Central&lt;/a&gt;. You can check out the Finchley &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-finchley-release-train" class="anchor" name="notable-changes-in-the-finchley-release-train"&gt;&lt;/a&gt;Notable Changes in the Finchley Release Train&lt;/h2&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Config server now honors the &lt;code&gt;if-modified-since&lt;/code&gt; header in requests before&lt;br/&gt;retrieving data and returns &lt;code&gt;last-modified&lt;/code&gt; header in response&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/57?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-stream" class="anchor" name="spring-cloud-stream"&gt;&lt;/a&gt;Spring Cloud Stream&lt;/h3&gt;
&lt;p&gt;*&lt;a href="https://github.com/spring-cloud/spring-cloud-stream-starters/releases/tag/vElmhurst.SR2"&gt;Elmhurst.SR2 Release&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/60?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-zookeeper" class="anchor" name="spring-cloud-zookeeper"&gt;&lt;/a&gt;Spring Cloud Zookeeper&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/25?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-aws" class="anchor" name="spring-cloud-aws"&gt;&lt;/a&gt;Spring Cloud Aws&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-aws/milestone/25?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-task" class="anchor" name="spring-cloud-task"&gt;&lt;/a&gt;Spring Cloud Task&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dependency Upgrades&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-task/issues?q=is%3Aissue+label%3A2.0.1.RELEASE+is%3Aclosed"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/55?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-openfeign" class="anchor" name="spring-cloud-openfeign"&gt;&lt;/a&gt;Spring Cloud OpenFeign&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/8?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-vault" class="anchor" name="spring-cloud-vault"&gt;&lt;/a&gt;Spring Cloud Vault&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dependency Upgrades&lt;/li&gt;
  &lt;li&gt;Documentation Refinements&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/26?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-bus" class="anchor" name="spring-cloud-bus"&gt;&lt;/a&gt;Spring Cloud Bus&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-bus/milestone/33?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/44?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-consul" class="anchor" name="spring-cloud-consul"&gt;&lt;/a&gt;Spring Cloud Consul&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;spring.cloud.discovery.enabled=false&lt;/code&gt; now behaves the same as &lt;code&gt;spring.cloud.consul.discovery.enabled=false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/milestone/36?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Better error handling when Ribbon is not on the classpath&lt;/li&gt;
  &lt;li&gt;Performance improvements in routing of HTTP and Websocket requests&lt;/li&gt;
  &lt;li&gt;Performance improvements when using modify request body filter&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/19?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-netflix" class="anchor" name="spring-cloud-netflix"&gt;&lt;/a&gt;Spring Cloud Netflix&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;HystrixConcurrencyStrategy&lt;/code&gt; can now be set using &lt;code&gt;HystrixPlugins#getConcurrencyStrategy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;spring.cloud.discovery.enabled=false&lt;/code&gt; now behaves the same as &lt;code&gt;eureka.client.enabled=false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/72?closed=1"&gt;Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following modules were updated as part of Finchley.SR3:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/57?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;1.0.0.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-function/milestone/7?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Elmhurst.SR2 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/60?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;2.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-cloudfoundry/milestone/10?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;2.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/25?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Aws &lt;/td&gt;
      &lt;td&gt;2.0.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-aws/milestone/25?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;2.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/55?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/8?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/26?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-bus/milestone/33?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/44?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.0.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/milestone/36?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/19?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Dependencies &lt;/td&gt;
      &lt;td&gt;Finchley.SR3 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/72?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Finchley.SR3&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
    dependencies {&#xD;
        classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE&amp;quot;&#xD;
    }&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
    imports {&#xD;
        mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Finchley.SR3&amp;#39;&#xD;
    }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
    compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
    ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow and Skipper 2.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/22/spring-cloud-data-flow-and-skipper-2-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2019-02-22:3574</id>
    <updated>2019-02-22T21:37:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; team is pleased to announce the release of &lt;code&gt;2.0 RC1&lt;/code&gt; of Data Flow.  Follow the &lt;em&gt;Getting Started&lt;/em&gt; guides for running on &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RC1/reference/htmlsingle/#getting-started-local"&gt;Local&lt;/a&gt;, &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RC1/reference/htmlsingle/#getting-started-cloudfoundry"&gt;Cloud Foundry&lt;/a&gt;, and &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RC1/reference/htmlsingle/#getting-started-kubernetes"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Hand in hand is the &lt;code&gt;2.0 RC1&lt;/code&gt; release of &lt;a href="https://cloud.spring.io/spring-cloud-skipper/"&gt;Spring Cloud Skipper&lt;/a&gt;. The &lt;a href="https://docs.spring.io/spring-cloud-skipper/docs/2.0.0.RC1/reference/htmlsingle/#getting-started"&gt;getting started section&lt;/a&gt; in the reference guide is the best place to start if you want to use Skipper separately from Data Flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="here-are-the-highlights-for-data-flow"&gt;&lt;a class="anchor" href="#here-are-the-highlights-for-data-flow"&gt;&lt;/a&gt;Here are the highlights for Data Flow&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Revamped metrics and monitoring of deployed applications on Kubernetes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated analytics using micrometer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dashboard improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database migration support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="revamped-metrics-and-monitoring-of-deployed-applications-on-kubernetes"&gt;&lt;a class="anchor" href="#revamped-metrics-and-monitoring-of-deployed-applications-on-kubernetes"&gt;&lt;/a&gt;Revamped metrics and monitoring of deployed applications on Kubernetes&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Data Flow 2.0 introduces a new architecture for collecting and displaying application metrics for Streams.  The Data Flow Metrics Collector introduced in Data Flow 1.4 has been removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/micrometer-arch.png" alt="Monitoring Architecture"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This new architecture is based on using the Micrometer library in the deployed applications to send metrics to popular monitoring systems and then visualizing the metrics with &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.
Each application in the &lt;a href="https://cloud.spring.io/spring-cloud-stream-app-starters/"&gt;Einstein release train of the application starters&lt;/a&gt; contains Micrometer libraries for Prometheus, InfluxDB and DataDog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this release we provide instructions on how to get started using &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RC1/reference/htmlsingle/#streams-monitoring-kubernetes-prometheus"&gt;Prometheus&lt;/a&gt; as the monitoring system when running Data Flow on Kubernetes.
Two Grafana dashboards are also provided, one that shows a more application centric view and other that show a more stream based view.  Here is a screenshot of the Grafana dashboard based on Prometheus showing the message rates for the applications in a stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/master/spring-cloud-dataflow-docs/src/main/asciidoc/images/grafana-prometheus-scdf-applications-dashboard.png" alt="Grafana Dashboard for applications in a stream deployed on Kubernetes"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Selectors for applications and streams allows you to navigate down to specific areas of interest.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="updated-analytics-using-micrometer"&gt;&lt;a class="anchor" href="#updated-analytics-using-micrometer"&gt;&lt;/a&gt;Updated analytics using micrometer&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In Data Flow 2.0, the use of Redis counters has been replaced with counters provided by the Micrometer library.
The Einstein release train of application starters now provide a &lt;a href="https://docs.spring.io/spring-cloud-stream-app-starters/docs/Einstein.RELEASE/reference/htmlsingle/#spring-cloud-stream-modules-counter-processor"&gt;Counter Processor&lt;/a&gt; and a &lt;a href="https://docs.spring.io/spring-cloud-stream-app-starters/docs/Einstein.RELEASE/reference/htmlsingle/#spring-cloud-stream-modules-counter-sink"&gt;Counter Sink&lt;/a&gt;.  &lt;a href="https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#spring-cloud-data-flow-samples-twitter-analytics-overview"&gt;The twitter analytics sample application&lt;/a&gt; has been updated to use the new counter implementation and a Grafana Dashboard is provided to show the equivalent view of what the Data Flow Analytics UI had previously shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/images/twitter_analytics.png" alt="Grafana Dashboard for Twitter Analytics"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="security-improvements"&gt;&lt;a class="anchor" href="#security-improvements"&gt;&lt;/a&gt;Security improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The server uses OAuth 2.0 authentication to secure the REST endpoints.  Documentation and sample code is now available that shows how to &lt;a href="http://docs.spring.io/spring-cloud-dataflow/docs/2.0.0.RC1/reference/htmlsingle/#_data_flow_template_and_security"&gt;configure the &lt;code&gt;DataFlowTemplate&lt;/code&gt; for use with OAuth2.0&lt;/a&gt;.
Dependent libraries that had recent CVEs reported were updated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="dashboard-improvements"&gt;&lt;a class="anchor" href="#dashboard-improvements"&gt;&lt;/a&gt;Dashboard improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can now search the audit trail by a date range.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="database-migration-support"&gt;&lt;a class="anchor" href="#database-migration-support"&gt;&lt;/a&gt;Database migration support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Flyway migration code has been improved and tested across all supported databases using a suite of &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-acceptance-tests/blob/master/acceptance-tests/spring-cloud-dataflow-acceptance-tests/src/test/java/org/springframework/cloud/dataflow/acceptance/tests/DataflowServerMigrationTests.java"&gt;Docker based integration tests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We postponed the feature of storing the detailed history of Task deployments for 2.1.  Various documentation issues and additional testing is planned leading up to the 2.0 GA release.  General themes for 2.1 will be a focus on documentation, getting started guides, videos and overall user experience.  A new site for Data Flow is planned as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also note that the 1.x line of Spring Cloud Data Flow will cease maintenance twelve months from the 2.0 GA announcement date. The 2.0 GA is tentatively planned for end of February 2019, so in February 2020, the 1.x line would reach end-of-general-support status.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="a-special-thanks"&gt;&lt;a class="anchor" href="#a-special-thanks"&gt;&lt;/a&gt;A special thanks&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Last but not least, we wanted to thank &lt;a href="https://github.com/sylank"&gt;Daniel Serleg&lt;/a&gt; for &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/pulls?q=is%3Apr+author%3Asylank"&gt;his many contributions in this release&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="stay-in-touch"&gt;&lt;a class="anchor" href="#stay-in-touch"&gt;&lt;/a&gt;Stay in touch&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.1.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/22/spring-tools-4-1-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2019-02-22:3573</id>
    <updated>2019-02-22T15:52:36Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.1.2 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Atom.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: live hover information for bean wirings now supports war-packaged boot apps running in a local server installation&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: live hover information for &lt;code&gt;@Value&lt;/code&gt; annotations (&lt;a href="https://github.com/spring-projects/sts4/issues/177"&gt;#177&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; new: bean symbols from XML config files now include exact location information&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; fixed: navigate to resource in live hovers for apps running on CF works again&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; fixed: search for symbols in project now happens on the server side to avoid no project-related symbols showing up on the client side before you start typing in a query&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; performance: improvement to further reduce the CPU load when checking processes for live hovers (&lt;a href="https://github.com/spring-projects/sts4/issues/140"&gt;#140&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; performance: the language server doesn&amp;rsquo;t trigger a full source and javadoc download for Maven projects anymore&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Concourse)&lt;/em&gt; new: support for hierarchical symbols in file added, produces nice outline view information now&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Concourse)&lt;/em&gt; new: support for YAML anchors, references, extend added (&lt;a href="https://github.com/spring-projects/sts4/issues/58"&gt;#58&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; new: quick text search can be switched to non-modal mode (&lt;a href="https://github.com/spring-projects/sts4/issues/189"&gt;#189&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; new: quick text search allows results to be filtered for certain file types (&lt;a href="https://github.com/spring-projects/sts4/issues/185"&gt;#185&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; fixed: startup performance regression found in early builds on Eclipse 4.11&lt;/li&gt;
  &lt;li&gt;various additional bug fixes and improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Atom, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2019-02-21-412-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2019-02-21-412-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.2.0 is scheduled to be released in late March 2019 (including an update to Eclipse 2019-03).&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: an Interview with Sree Tummidi, Senior Product Manager for Security at Pivotal</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/22/a-bootiful-podcast-an-interview-with-sree-tummidi-senior-product-manager-for-security-at-pivotal" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-02-22:3572</id>
    <updated>2019-02-22T00:34:09Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! This week I&amp;rsquo;m excited to welcome Sreee Tummidi, a senior product manager working at the intersection of application security and platform at Pivotal. We talked about security, Spring Security, cloud platforms, OAuth, OIDC and OIDC Connect, SAML, and of course the Cloud Foundry UAA, and tons more.&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href="http://twitter.com/sreetummidi"&gt;@sreetummidi&lt;/a&gt;&lt;br/&gt;&lt;a href="github.com/cloudfoundry/uaa"&gt;UAA&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/579250395&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>CVE-2019-3778: Spring Security OAuth 2.3.5, 2.2.4, 2.1.4, 2.0.17 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/21/cve-2019-3778-spring-security-oauth-2-3-5-2-2-4-2-1-4-2-0-17-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Joe Grandja</name>
    </author>
    <id>tag:spring.io,2019-02-21:3571</id>
    <updated>2019-02-21T17:06:10Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;We have released Spring Security OAuth 2.3.5, 2.2.4, 2.1.4 and 2.0.17 to address &lt;a href="https://pivotal.io/security/cve-2019-3778"&gt;CVE-2019-3778: Open Redirector in spring-security-oauth2&lt;/a&gt;. Please review the information in the CVE report and upgrade immediately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For additional changes included in each release, please refer to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-security-oauth/milestone/42?closed=1"&gt;2.3.5 changelog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-security-oauth/milestone/44?closed=1"&gt;2.2.4 changelog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-security-oauth/milestone/45?closed=1"&gt;2.1.4 changelog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-security-oauth/milestone/43?closed=1"&gt;2.0.17 changelog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For users of &lt;strong&gt;Spring Boot 1.5.x&lt;/strong&gt; and &lt;strong&gt;Spring IO Platform Cairo&lt;/strong&gt;, it is highly recommended to override the &lt;code&gt;spring-security-oauth&lt;/code&gt; version to the latest version containing the fix for the CVE. Please see the &lt;strong&gt;Mitigation&lt;/strong&gt; section in the CVE report for detailed instructions on how to override the version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security-oauth/"&gt;Project Page&lt;/a&gt; |
&lt;a href="https://github.com/spring-projects/spring-security-oauth/"&gt;GitHub&lt;/a&gt; |
&lt;a href="http://projects.spring.io/spring-security-oauth/docs/Home.html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-security-oauth2"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>What's new with Spring Initializr</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/20/what-s-new-with-spring-initializr" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Madhura Bhave</name>
    </author>
    <id>tag:spring.io,2019-02-19:3567</id>
    <updated>2019-02-20T10:57:26Z</updated>
    <content type="html">&lt;p&gt;The quickest way to generate Spring Boot projects is through &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;. The site provides a curated list of dependencies that you can add to your application based on the selected Spring Boot version. You can also choose the language, build system and JVM version for the project. Over the years, the popularity of start.spring.io as the tool for generating Spring projects has grown exponentially and millions of projects are generated every year using the site.&lt;/p&gt;
&lt;p&gt;For the past few months, we’ve been working on a complete overhaul of the project generation API. To better understand the motivation behind this, take a look at the project structure below:&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/mbhave/initializr/cd9582d6a0b092e311d0b255d6f767723d47fa44/initializr-structure-old.png" alt="Old Structure" /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;initializr-generator&lt;/code&gt; is the library that contains the core of the project generation API.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;initializr-web&lt;/code&gt; contains the the REST endpoints and everything related to the web UI.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;initializr-site&lt;/code&gt; contains all the customizations that are available on start.spring.io.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with the existing API was that for anyone who wanted to customize project generation, the only sensible way to do that was to fork the library and extend or modify the &lt;code&gt;ProjectGenerator&lt;/code&gt; class. This made for quite a clunky developer experience. &lt;/p&gt;&lt;h2&gt;&lt;a href="#new-project-generation-api" class="anchor" name="new-project-generation-api"&gt;&lt;/a&gt;New Project Generation API&lt;/h2&gt;
&lt;p&gt;The main goal of the new API is to allow customizing the generated project without forking the library. To allow a contribution model for various aspects of the project, there is an abstraction for each of them. These include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A build abstraction with Maven and Gradle implementations that enables customization of the build file&lt;/li&gt;
  &lt;li&gt;A language abstraction with Java, Groovy and Kotlin implementations&lt;/li&gt;
  &lt;li&gt;A more high-level model for text resources, &lt;code&gt;.gitignore&lt;/code&gt; and basic configuration files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These abstractions are made available via several hook points that you can use to customize project assets:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;BuildCustomizer&lt;/code&gt; to add dependencies, plugins or other configuration items&lt;/li&gt;
  &lt;li&gt;Source file customizer to add annotations, methods or additional classes to a project&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ProjectContributor&lt;/code&gt;, a high-level hook-point to add assets to a directory structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The library provides several conditions so that customizers can be applied based on the requested project. The following example illustrates how the Gradle build can be tuned to apply the &lt;code&gt;war&lt;/code&gt; plugin when a &lt;code&gt;war&lt;/code&gt; packaging is requested:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
@ConditionalOnPackaging(WarPackaging.ID)&#xD;
public BuildCustomizer&amp;lt;GradleBuild&amp;gt; warPluginContributor() {&#xD;
    return (build) -&amp;gt; build.addPlugin(&amp;quot;war&amp;quot;);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that customizers can be defined in external modules (a bit similar to auto-configurations in Spring Boot) with no change to the library necessary. &lt;/p&gt;
&lt;p&gt;As part of the refactoring, we&amp;rsquo;ve also refined the project structure.&lt;br/&gt;﻿&lt;img src="https://raw.githubusercontent.com/mbhave/initializr/10f4f0470135197c18300db6b5e93bce680b9249/initializr-image-new.png" alt="New Structure" /&gt;&lt;/p&gt;
&lt;p&gt;The top-level concepts such as &lt;code&gt;ProjectContributor&lt;/code&gt;, &lt;code&gt;BuildCustomizer&lt;/code&gt; are in &lt;code&gt;initializr-generator&lt;/code&gt;. This module also contains the minimum infrastructure necessary to actually generate a project. &lt;code&gt;initializr-generator-spring&lt;/code&gt; provides the contributors for the project structure that we would like to generate for Spring projects. Additionally, the code is now split into two repositories on GitHub, one for &lt;a href="https://github.com/spring-io/initializr"&gt;the library&lt;/a&gt; and the other for &lt;a href="https://github.com/spring-io/start.spring.io"&gt;&lt;code&gt;start-site&lt;/code&gt;&lt;/a&gt; that represents our production instance on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#new-features-on-start-spring-io" class="anchor" name="new-features-on-start-spring-io"&gt;&lt;/a&gt;New features on start.spring.io&lt;/h2&gt;
&lt;p&gt;The new project generation API has enabled us to easily add quite a few features to start.spring.io. We&amp;rsquo;ve merged them today so you can use those right away.&lt;/p&gt;&lt;h3&gt;&lt;a href="#help-document" class="anchor" name="help-document"&gt;&lt;/a&gt;Help Document&lt;/h3&gt;
&lt;p&gt;The generated project now contains a &lt;code&gt;HELP.md&lt;/code&gt; file at the root of the project. The file is tailored according to the dependencies present in the application. Currently, it contains links to guides and reference docs related to the selected dependencies. In the future, we plan to customize the HELP.md file further to provide next steps that will help you grow your application. &lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-rest-docs-build-configuration" class="anchor" name="spring-rest-docs-build-configuration"&gt;&lt;/a&gt;Spring Rest Docs Build Configuration&lt;/h3&gt;
&lt;p&gt;If a project is generated with the &lt;code&gt;restdocs&lt;/code&gt; dependency, the build is configured with the Asciidoctor plugin using a &lt;code&gt;BuildCustomizer&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#auto-generation-of-directory-structure-for-flyway" class="anchor" name="auto-generation-of-directory-structure-for-flyway"&gt;&lt;/a&gt;Auto-generation of directory structure for Flyway&lt;/h3&gt;
&lt;p&gt;For a generated project that uses &lt;code&gt;Flyway&lt;/code&gt;, a &lt;code&gt;src/main/resources/db/migration&lt;/code&gt; is now automatically created. To illustrate how easy this can be done with the API, here is the contributor for that feature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
@ConditionalOnRequestedDependency(&amp;quot;flyway&amp;quot;)&#xD;
public ProjectContributor flywayProjectContributor() {&#xD;
  return (directory) -&amp;gt; {&#xD;
     Path migrationDirectory = directory&#xD;
           .resolve(&amp;quot;src/main/resources/db/migration&amp;quot;);&#xD;
     Files.createDirectories(migrationDirectory);&#xD;
  };&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#what-s-coming" class="anchor" name="what-s-coming"&gt;&lt;/a&gt;What’s coming&lt;/h2&gt;
&lt;p&gt;We’ve barely scratched the surface of what is possible with the new API and we want to bring new features while still keeping a balance between an improved developer experience and non intrusive changes.&lt;/p&gt;
&lt;p&gt;Typically, we want to bring more content to HELP.md where dedicated tips can be provided based on selected dependencies and, more importantly, dependencies you could have selected to bring awareness of what you might not know yet.&lt;/p&gt;
&lt;p&gt;We are also working on a new Web UI for start.spring.io and ways to help you expand your applications, stay tuned!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Season 5 Recap</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/20/spring-tips-season-5-recap" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-02-20:3569</id>
    <updated>2019-02-20T08:49:04Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Can you believe it? We&amp;rsquo;re at the end of yet another season - our &lt;em&gt;fifth&lt;/em&gt;! - of &lt;em&gt;Spring Tips&lt;/em&gt;! I wasn&amp;rsquo;t sure at first (when we started down this journey a few years ago) that these videos would take off or become popular but it seems the Spring community&amp;rsquo;s curiosity knows no bounds! &lt;/p&gt;
&lt;p&gt;I try in every season to look at new technology (RSocket and R2DBC, eh, &lt;em&gt;spring&lt;/em&gt; to mind..), and to introduce variations on themes (we looked at three projects that extend Spring Cloud to native IaaS-platforms this season!), and to introduce potentially niche but often appreciated topics (this season we looked at BPMN 2 workflow management with Flowable and we looked JavaFX, for example). I also try whenever possible to introduce concepts in terms of Spring (where normally I introduce Spring in terms of the concepts they support). This season was, from that perspective, a success. &lt;/p&gt;
&lt;p&gt;This season also marks the first full season with me back at the helm of an Apple MacBook Pro; viewers might&amp;rsquo;ve noticed that I switched between Linux and macOS over the various years of doing these videos. My production methodology changes dramatically, too! It&amp;rsquo;s interesting to me to look at the user interfaces on display in the earlier videos to see their progressions. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m very excited for season six! I&amp;rsquo;ve got a lot of good stuff cooking, so be sure &lt;a href="http://Twitter.com/SpringTipsLIve"&gt;to follow @SpringTipsLive&lt;/a&gt; on Twitter for more. You can catchup on the older videos on &lt;a href="https://bit.ly/spring-tips-playlist"&gt;the Spring Tips playlist&lt;/a&gt;, in the meantime. &lt;/p&gt;
&lt;p&gt;I love doing the screencasts because I can explain concepts and articulate code to support those concepts visually with some ease. But that discussion often ignores the &lt;em&gt;people&lt;/em&gt; behind the technology; what motivated our team to create something like Spring Boot? How is the code across the Spring portfolio projects so consistently clean? How do other organizations use Spring? These questions can be just as illuminating, and they lend themselves to natural discussions. So, I just launched a pdocast focused on the people in the Spring ecosystem called &lt;a href="http://bit.ly/a-bootiful-podcast"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;&lt;/a&gt;. It&amp;rsquo;s available for Apple and Android devices. I hope you&amp;rsquo;ll listen in and feedback. &lt;/p&gt;
&lt;p&gt;As always I hope you like these Spring Tips videos. I&amp;rsquo;d love any feedback you have on them, good, bad or indifferent: find and follow me &lt;a href="http://twitter.com/Starbuxman"&gt;on Twitter (@starbuxman)&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This season kicked off in December 2018, paused for the holidays and continued until just last week, the week of February 13. Here&amp;rsquo;s a list of all the videos and the links to the pages where you can watch them. Enjoy and, as always, we&amp;rsquo;ll see you next time!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/12/05/spring-tips-bootiful-microsoft-azure"&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/12/12/spring-tips-bootiful-google-cloud-platform"&gt;Google Cloud Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/12/19/spring-tips-reactive-sql-data-access-with-spring-data-r2dbc"&gt;Reactive SQL Data Access with Spring Data R2DBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/12/26/spring-tips-bootiful-alibaba"&gt;Alibaba &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/01/02/spring-tips-rsocket"&gt;RSocket &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/01/09/spring-tips-business-process-management-with-flowable"&gt;Flowable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/01/16/spring-tips-javafx"&gt;JavaFX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/01/23/spring-tips-hedging-client-requests-with-the-reactive-webclient-and-a-service-registry"&gt;Reactively Hedging Client Requests with a Service Registry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/01/30/spring-tips-the-reactor-context"&gt;The Reactor Context &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/06/spring-tips-testing-reactive-code"&gt;Testing Reactive Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/13/spring-tips-apache-geode"&gt;Apache Geode &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 19, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/19/this-week-in-spring-february-19-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-02-19:3568</id>
    <updated>2019-02-19T19:46:00Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! In the US, Monday was a public holiday so today, Tuesday, feels a bit like Monday and i was happily going through the Monday motions and then I got a reminder that I had to write this week&amp;rsquo;s installment! Ooops! Thank goodness for technology. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m at San Francisco International Airport about to board a fight for the Washington DC edition of the SpringOne Tour. Are you going to be in Washington DC? &lt;a href="http://twitter.com/starbuxman"&gt;Reach out and say hi! My direct messages on Twitter are correct, too&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Then, it&amp;rsquo;s off to Kansas City, KS/MO for, among other things, an appearance &lt;a href="https://www.meetup.com/KansasCityJUG/events/257928443/"&gt;at the Kansas City JUG&lt;/a&gt; this Thursday, February 21, 2019. Again: join us! &lt;/p&gt;
&lt;p&gt;Alright my friends, we&amp;rsquo;ve got tons to get to, so let&amp;rsquo;s: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/15/introducing-java-cfenv-a-new-library-for-accessing-cloud-foundry-services"&gt;Introducing java-cfenv: A new library for accessing Cloud Foundry Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/15/spring-boot-2-1-3-available-now"&gt;Spring Boot 2.1.3 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WATCH: In last week&amp;rsquo;s installment of &lt;a href="https://spring.io/blog/2019/02/13/spring-tips-apache-geode"&gt;&lt;em&gt;Spring Tips&lt;/em&gt;&lt;/a&gt;, I looked at Apache Geode, a.k.a. Gemfire, the grooviest distributed data grid you&amp;rsquo;ve never heard of. Don&amp;rsquo;t miss this!&lt;/li&gt;
  &lt;li&gt;LISTEN: in last week&amp;rsquo;s installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I Interview Spring Contributor and &lt;em&gt;Learning Spring Boot 2.0&lt;/em&gt; author &lt;a href="https://spring.io/blog/2019/02/15/a-bootiful-podcast-an-interview-with-spring-contributor-and-learning-spring-boot-2-0-author-greg-turnquist"&gt;Greg Turnquist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/14/spring-security-5-1-4-released"&gt;Spring Security 5.1.4 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/13/spring-data-lovelace-sr5-released"&gt;Spring Data Lovelace SR5 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/02/13/spring-framework-5-1-5-available-now"&gt;Spring Framework 5.1.5 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Framework ninja Sébastien Deleuze shares that the first part of &lt;a href="https://github.com/spring-projects/spring-framework/issues/19975#issuecomment-464732215"&gt;Kotlin Coroutines support has been merged in Spring Framework master branch and is now available in SNAPSHOT builds.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss Madhura Bhave&amp;rsquo;s Spring I/O talk on breaking the magician&amp;rsquo;s code: &lt;a href="https://twitter.com/springcentral/status/1097545378650619904"&gt;diving deeper into Spring Boot Internals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Johannes Edmeier has announced &lt;a href="https://github.com/codecentric/spring-boot-admin/issues?utf8=%E2%9C%93&amp;q=milestone%3A2.0.5"&gt;Codecentric Spring Boot Admin 2.0.5 has been released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://javarevisited.blogspot.com/2018/11/top-5-spring-boot-features-java.html#.XGV0j1tr9qI.twitter"&gt;A nice post with the top 5 Spring Boot features every developer should know&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dan Newton has a nice post on &lt;a href="https://lankydanblog.com/2019/02/16/asynchronous-rdbms-access-with-spring-data-r2dbc/"&gt;asynchronous (reactive) data access with Spring Data R2DBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love this writeup of Rabobank, a great example of &lt;a href="https://www.cloudfoundry.org/blog/rabobank-migrates-massive-portal-to-cloud-foundry-and-microservices/"&gt;a well-established business with highly functioning IT infrastructure &lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoq.com/presentations/spring-data-kotlin?utm_source=twitter&amp;utm_medium=link&amp;utm_campaign=calendar"&gt;Check this talk from Christoph Strobl on InfoQ about what&amp;rsquo;s new in Spring Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;d love to see a &lt;em&gt;Women Who Spring&lt;/em&gt; meetup in the San Francisco, Bay Area, and if you&amp;rsquo;d like that too then please &lt;a href="https://twitter.com/springcloud/status/1096211478871490565"&gt;reply or direct message Spring Boot team member and engineer Madhura Bhave&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Matt Raible and I want to propose an epic talk to SpringOne Platform 2019. Don&amp;rsquo;t you? &lt;a href="https://twitter.com/springcentral/status/1096197440796049410"&gt;Check out our video!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is cool. Some sample code demonstrating a &lt;a href="https://twitter.com/springcloud/status/1096151201979211784"&gt;Spring Cloud Config Server connected to the Spring Cloud event bus &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the Baeldung blog has a nice post on &lt;a href="https://twitter.com/springcentral/status/1096129702220230656"&gt;creating SOAP-based web services with Spring WS and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Matt Raible and I demonstrated how to build reactive Spring Boot applications in this long tutorial from last year. &lt;a href="https://twitter.com/oktadev/status/1095753474329858049?s=12"&gt;We &lt;em&gt;also&lt;/em&gt; demonstrated how to &lt;em&gt;test&lt;/em&gt; those applications, so follow along if you want to learn more about testing!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you submitted your talks for &lt;a href="https://twitter.com/springcentral/status/1095719922179756032"&gt;Spring I/O 2019, in beautiful Barcelona, Spain? HURRY!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Redis Lettuce driver &lt;a href="https://twitter.com/springcentral/status/1095719906635628544"&gt;5.1.4.RELEASE is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s a particular issue with Kotlin and Java interoperability that prevents Spring Data repositories working with natural IDs. &lt;a href="https://twitter.com/springcentral/status/1095716148614696966"&gt;Please vote for this issue to show your support for seeing it fixed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Introducing java-cfenv: A new library for accessing Cloud Foundry Services</title>
    <link rel="alternate" href="https://spring.io/blog/2019/02/15/introducing-java-cfenv-a-new-library-for-accessing-cloud-foundry-services" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2019-02-15:3566</id>
    <updated>2019-02-15T18:36:27Z</updated>
    <content type="html">&lt;h2&gt;&lt;a href="#introduction" class="anchor" name="introduction"&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The Spring Cloud Connectors library has been with us since the launch event of Cloud Foundry itself back in 2011. One of the main goals of the connector library and Cloud Foundry’s Java buildpack was to “reduce the initial investment when you want to get started with Cloud Foundry”. The connector library creates the Spring bean definitions required to connect to backing services, like databases, using information contained in the VCAP_SERVICES environment variable. The buildpack then replaces these bean definitions you had in your application with those created by the connector library through a feature called ‘auto-reconfiguration’. You may have seen it mentioned in the logs when you pushed an app to Cloud Foundry…&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;-----&amp;gt; Downloading Spring Auto Reconfiguration 2.5.0_RELEASE from https://java-buildpack.cloudfoundry.org/auto-reconfiguration/auto-reconfiguration-2.5.0_RELEASE.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auto-reconfiguration is great for getting started. However, it is not so great when you want more control, for example changing the size of the connection pool associated with a &lt;code&gt;DataSource&lt;/code&gt;. This requires writing connector-specific code and it doesn’t expose as many connection pool options as Spring Boot does. The same limitations apply to other backing services. &lt;/p&gt;
&lt;p&gt;This raises the question, why do we have two competing mechanisms to create service infrastructure beans? Can’t we let Spring Boot handle all of this for us? That was the motivation for creating our new &lt;code&gt;java-cfenv&lt;/code&gt; library.&lt;/p&gt;&lt;h2&gt;&lt;a href="#introducing-java-cfenv" class="anchor" name="introducing-java-cfenv"&gt;&lt;/a&gt;Introducing java-cfenv&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/pivotal-cf/java-cfenv"&gt;java-cfenv&lt;/a&gt; library is inspired by the &lt;a href="https://github.com/cloudfoundry-community/node-cfenv/"&gt;node-cfenv&lt;/a&gt; and &lt;a href="https://github.com/jmcarp/py-cfenv"&gt;py-cfenv&lt;/a&gt; libraries used elsewhere in the Cloud Foundry ecosystem. These libraries provide a simple API for retrieving credentials from the JSON strings contained inside the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable. We will start with a tour of the Java API (which we don’t expect will be used very often) and then show how it integrates with Spring and Spring Boot’s auto-configuration functionality.&lt;/p&gt;
&lt;p&gt;The core API consists of five classes &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;CfEnv&lt;/code&gt; which is responsible for parsing the contents of the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; and &lt;code&gt;VCAP_APPLICATION&lt;/code&gt; environment variables.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CfApplication&lt;/code&gt; that provides accessors for the contents of the &lt;code&gt;VCAP_APPLICATION&lt;/code&gt; environment variable.&lt;/li&gt;
  &lt;li&gt;Finder methods on &lt;code&gt;CfEnv&lt;/code&gt; return instances of a &lt;code&gt;CfService&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CfService&lt;/code&gt; provides accessors for the name, label, tabs, and plan of the service as well as a &lt;code&gt;CfCredentials&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CfCredentials&lt;/code&gt; provides accessors for getting the username, password, host, port, and URI. The URI is represented using a &lt;code&gt;UriInfo&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if you bind a MySql service to your application in Cloud Foundry, the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable would contain an entry such as&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;{&#xD;
 &amp;quot;p-mysql&amp;quot;: [&#xD;
    {&#xD;
      &amp;quot;credentials&amp;quot;: {&#xD;
        &amp;quot;hostname&amp;quot;: &amp;quot;10.0.4.35&amp;quot;,&#xD;
        &amp;quot;port&amp;quot;: 3306,&#xD;
        &amp;quot;name&amp;quot;: &amp;quot;cf_2e23d10a_8738_8c3c_66cf_13e44422698c&amp;quot;,&#xD;
        &amp;quot;username&amp;quot;: &amp;quot;8McHri7aKbuTEGCR&amp;quot;,&#xD;
        &amp;quot;password&amp;quot;: &amp;quot;J2BNJYkeXAH9idkG&amp;quot;,&#xD;
        &amp;quot;uri&amp;quot;: &amp;quot;mysql://8McHri7aKbuTEGCR:J2BNJYkeXAH9idkG@10.0.4.35:3306/cf_2e23d10a_8738_8c3c_66cf_13e44422698c?reconnect=true&amp;quot;,&#xD;
        &amp;quot;jdbcUrl&amp;quot;: &amp;quot;jdbc:mysql://10.0.4.35:3306/cf_2e23d10a_8738_8c3c_66cf_13e44422698c?user=8McHri7aKbuTEGCR&amp;amp;password=J2BNJYkeXAH9idkG&amp;quot;&#xD;
      },&#xD;
      &amp;quot;syslog_drain_url&amp;quot;: null,&#xD;
      &amp;quot;volume_mounts&amp;quot;: [],&#xD;
      &amp;quot;label&amp;quot;: &amp;quot;p-mysql&amp;quot;,&#xD;
      &amp;quot;provider&amp;quot;: null,&#xD;
      &amp;quot;plan&amp;quot;: &amp;quot;100mb&amp;quot;,&#xD;
      &amp;quot;name&amp;quot;: &amp;quot;mysql&amp;quot;,&#xD;
      &amp;quot;tags&amp;quot;: [&#xD;
        &amp;quot;mysql&amp;quot;,&#xD;
        &amp;quot;relational&amp;quot;&#xD;
      ]&#xD;
    }&#xD;
  ]&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using the java-cfenv API, we can obtain the credential information using a few simple method calls, and then programmatically create a connection to your database.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;CfEnv cfEnv = new CfEnv();&#xD;
CfService cfService = cfEnv.findServiceByName(“mysql”);&#xD;
String plan = cfService.getPlan(); // 100mb&#xD;
CfCredentials cfCredentials = cfService.getCredentials();&#xD;
String password = cfCredentials.getPassword(); // J2BNJYkeXAH9idkG&#xD;
UriInfo uriInfo = cfCredentials.getUriInfo();&#xD;
String username = uriInfo.getUsername(); // 8McHri7aKbuTEGCR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;findServiceByName&lt;/code&gt; method takes a regular expression to help provide some portability across different Cloud Foundry environments which can name services slightly differently. There are other finder methods too, to help you select from tags and labels etc.&lt;/p&gt;&lt;h2&gt;&lt;a href="#database-support" class="anchor" name="database-support"&gt;&lt;/a&gt;Database support&lt;/h2&gt;
&lt;p&gt;In the previous example, you probably just want to obtain the JSON field jdbcUrl so you can pass it into a &lt;code&gt;DataSource&lt;/code&gt;. You can do this using the API&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;String jdbcUrl = cfCredentials.getString(“jdbcUrl”);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, not all database services on Cloud Foundry provide this handy field. In fact, the fields provided by various database services on Cloud Foundry can be rather arbitrary. The existing connector library has developed heuristics to deal with this disparity, and this functionality has been ported over to the new java-cfenv library. It’s is available in the &lt;code&gt;CfEnvJdbc&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;CfEnvJdbc cfEnvJdbc = new CfEnvJdbc();&#xD;
CfJdbcService cfJdbcService = cfEnvJdbc.findJdbcService();&#xD;
String jdbcUrl = cfJdbcService.getUrl();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method &lt;code&gt;findJdbcService&lt;/code&gt; will throw an exception if there is more than one database service bound to the application. In this case, you can use the method &lt;code&gt;findJdbcServiceByName&lt;/code&gt; to select among multiple database services.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;String jdbcUrl1 = cfEnvJdbc.findJdbcServiceByName(&amp;#39;mysqlA&amp;#39;).getUrl();&#xD;
String jdbcUrl2 = cfEnvJdbc.findJdbcServiceByName(&amp;#39;mysqlB&amp;#39;).getUrl();
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#use-with-spring" class="anchor" name="use-with-spring"&gt;&lt;/a&gt;Use with Spring&lt;/h2&gt;
&lt;p&gt;If you are using Spring and not Spring Boot, you can register a &lt;code&gt;CfJdbcEnv&lt;/code&gt; instance as a bean and then invoke methods on it using the Spring Expression Language to set application properties.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
public CfJdbcEnv cfJdbcEnv() {&#xD;
  return new CfJdbcEnv();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in a property file, access the &lt;code&gt;CfJdbcEnv&lt;/code&gt; instance&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;myDatasourceUrl=#{ cfJdbcEnv.findJdbcService().getUrl() }
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#use-with-spring-boot" class="anchor" name="use-with-spring-boot"&gt;&lt;/a&gt;Use with Spring Boot&lt;/h2&gt;
&lt;p&gt;Most Spring Boot users will not have to use the java-cfenv API directly. The java-cfenv library contains Spring Boot &lt;code&gt;EnvironmentPostProcessor&lt;/code&gt; implementations that set well-known Spring Boot properties automatically. This allows for Spring Boot’s auto-configuration to kick-in while still leaving open the possibility of overriding values through environment variables or other higher prioritized environment property sources. &lt;/p&gt;
&lt;p&gt;After generating your project from &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;, all you need to do to make this work is to manually add the java-cfenv-boot dependency into your project, and disable auto-reconfiguration when pushing your application to Cloud Foundry. For maven, the dependency is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;io.pivotal.cfenv&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;java-cfenv-boot&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.0.0.M1&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this is currently a milestone build, you will need to add a milestone &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; configuration such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;repository&amp;gt;&#xD;
   &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
   &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
   &amp;lt;url&amp;gt;http://repo.spring.io/libs-milestone-local&amp;lt;/url&amp;gt;&#xD;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To disable auto-reconfiguration, use the following commands or their equivalent in a manifest file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cf set-env &amp;lt;APP&amp;gt; JBP_CONFIG_SPRING_AUTO_RECONFIGURATION &amp;#39;{enabled: false}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since auto-reconfiguration also sets the &lt;code&gt;cloud&lt;/code&gt; profile, which many applications have come to depend upon, you will likely need to also set this profile explicitly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cf set-env &amp;lt;APP&amp;gt; SPRING_PROFILES_ACTIVE cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using a manifest, the entries would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;env:&#xD;
 SPRING_PROFILES_ACTIVE: cloud&#xD;
 JBP_CONFIG_SPRING_AUTO_RECONFIGURATION: &amp;#39;{enabled: false}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;It’s worth noting that in production, you probably should be doing this anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To set connection pool properties, you can now simply use standard Spring Boot properties such as &lt;code&gt;spring.datasource.maxActive=10&lt;/code&gt; and other more specific connection pool properties.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;More information on how to use the java-cfenv library is available on &lt;a href="https://github.com/pivotal-cf/java-cfenv"&gt;GitHub&lt;/a&gt;. The current release is 1.0.0.M1 and there will be a short path to a GA release since it is being incorporated into the Data Flow 2.0 GA release later this month. As always, we welcome your feedback and contributions, even if they result in breaking API changes that need to be incorporated into a java-cfenv 2.0 version shortly after the 1.0 release.&lt;/p&gt;
&lt;p&gt;The 1.0 GA release of java-cfenv will support all the services that were part of the Spring Cloud Connectors project as they are well supported by Spring Boot auto-configuration. &lt;strong&gt;At that point, the existing Connectors library will be put into maintenance mode.&lt;/strong&gt; Critical bugs and security issues will, of course, be addressed, but new features will not be added. A guide for migrating applications from Spring Cloud Connectors to java-cfenv will be provided with the 1.0 GA release of java-cfenv.&lt;/p&gt;
&lt;p&gt;There are other libraries that build off the core Connectors project, listed on the project page. These extension projects can continue to use Connectors, but the maintainers are encouraged to migrate to a Boot-centric approach. &lt;/p&gt;</content>
  </entry>
</feed>
